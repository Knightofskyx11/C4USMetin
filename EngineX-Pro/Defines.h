#pragma once
#define SET_NUMBERH(x)			( (BYTE)((DWORD)(x)>>(DWORD)8) )
#define SET_NUMBERL(x)			( (BYTE)((DWORD)(x) & 0xFF) )
#define SET_NUMBERHW(x)			( (WORD)((DWORD)(x)>>(DWORD)16) )
#define SET_NUMBERLW(x)			( (WORD)((DWORD)(x) & 0xFFFF) )
#define SET_NUMBERHDW(x)		( (DWORD)((unsigned __int64)(x)>>(DWORD)32) )
#define SET_NUMBERLDW(x)		( (DWORD)((unsigned __int64)(x) & 0xFFFFFFFF) )
#define MAKE_NUMBERW(x,y)		( (WORD)(((BYTE)((y)&0xFF)) |   ((BYTE)((x)&0xFF)<<8 ))  )
#define MAKE_NUMBERQW(x,y)		( (unsigned __int64)(((DWORD)((y)&0xFFFFFFFF)) | ((DWORD)((x)&0xFFFFFFFF)<<32))  )
#define MAKE_NUMBERDW(x,y)		( (DWORD)(((WORD)((y)&0xFFFF)) | ((WORD)((x)&0xFFFF)<<16))  )
#define MAKEQWORD(a, b)			((__int64)(((DWORD)((__int64)(a) & 0xffffffff)) | ((__int64)((DWORD)((__int64)(b) & 0xffffffff))) << 32))  
#define LODWORD(h)				((DWORD)(__int64(h) & __int64(0xffffffff)))   
#define HIDWORD(h)				((DWORD)(__int64(h) >> __int64(32)))

enum
{
	OBJECT_ALL = 1,
	OBJECT_MOB = 2,
	OBJECT_BOSS = 4,
	OBJECT_PC = 8,
	OBJECT_MINE = 16,
	OBJECT_STONE = 32,
	OBJECT_NPC = 64
};



inline char* GetStr(DWORD offset) {
	if (*(int*)(offset + 0x10) > 15)
		return (char*)(*(DWORD*)offset);
	else
		return (char*)offset;
}

typedef struct
{
#ifdef METINPL
	DWORD unk;
#endif
	char  name[24];
	DWORD		m_dwBaseX;
	DWORD		m_dwBaseY;
	DWORD		m_dwSizeX;
	DWORD		m_dwSizeY;
	DWORD		m_dwEndX;
	DWORD		m_dwEndY;
} TMapInfo;


enum
{
	FUNC_WAIT,
	FUNC_MOVE,
	FUNC_ATTACK,
	FUNC_COMBO,
	FUNC_MOB_SKILL,
	FUNC_EMOTION,
	FUNC_SKILL = 0x80,
};

enum
{
	DIR_UP,
	DIR_DOWN,
	DIR_LEFT,
	DIR_RIGHT,
};


enum Color
{
	RED,
	GREEN,
	BLUE,
	WHITE,
	BLACK
};
enum Windows
{
	RESERVED_WINDOW,
	INVENTORY,				
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
	GROUND,					
	BELT_INVENTORY,			

	WINDOW_TYPE_MAX,
};
enum Directions
{
	LEFT,
	RIGHT,
	UP,
	DOWN,
	
};











enum
{
	MAIN_RACE_WARRIOR_M,
	MAIN_RACE_ASSASSIN_W,
	MAIN_RACE_SURA_M,
	MAIN_RACE_SHAMAN_W,
	MAIN_RACE_WARRIOR_W,
	MAIN_RACE_ASSASSIN_M,
	MAIN_RACE_SURA_W,
	MAIN_RACE_SHAMAN_M,
	MAIN_RACE_MAX_NUM,
};
enum Type
{
	TYPE_ENEMY,
	TYPE_NPC,
	TYPE_STONE,
	TYPE_WARP,
	TYPE_DOOR,
	TYPE_BUILDING,
	TYPE_PC,
	TYPE_POLY,
	TYPE_HORSE,
	TYPE_GOTO,

	TYPE_OBJECT, // Only For Client
};
enum PointTypes
{
	POINT_NONE,                 // 0
	POINT_LEVEL,                // 1
	POINT_VOICE,                // 2
	POINT_EXP,                  // 3
	POINT_NEXT_EXP,             // 4
	POINT_HP,                   // 5
	POINT_MAX_HP,               // 6
	POINT_SP,                   // 7
	POINT_MAX_SP,               // 8  
	POINT_STAMINA,              // 9  ½ºÅ×¹Ì³Ê
	POINT_MAX_STAMINA,          // 10 ÃÖ´ë ½ºÅ×¹Ì³Ê

	POINT_GOLD,                 // 11
	POINT_ST,                   // 12 ±Ù·Â
	POINT_HT,                   // 13 Ã¼·Â
	POINT_DX,                   // 14 ¹ÎÃ¸¼º
	POINT_IQ,                   // 15 Á¤½Å·Â
	POINT_ATT_POWER,            // 16 °ø°Ý·Â
	POINT_ATT_SPEED,            // 17 °ø°Ý¼Óµµ
	POINT_EVADE_RATE,           // 18 È¸ÇÇÀ²
	POINT_MOV_SPEED,            // 19 ÀÌµ¿¼Óµµ
	POINT_DEF_GRADE,            // 20 ¹æ¾îµî±Þ
	POINT_CASTING_SPEED,        // 21 ÁÖ¹®¼Óµµ (Äð´Ù¿îÅ¸ÀÓ*100) / (100 + ÀÌ°ª) = ÃÖÁ¾ Äð´Ù¿î Å¸ÀÓ
	POINT_MAGIC_ATT_GRADE,      // 22 ¸¶¹ý°ø°Ý·Â
	POINT_MAGIC_DEF_GRADE,      // 23 ¸¶¹ý¹æ¾î·Â
	POINT_EMPIRE_POINT,         // 24 Á¦±¹Á¡¼ö
	POINT_LEVEL_STEP,           // 25 ÇÑ ·¹º§¿¡¼­ÀÇ ´Ü°è.. (1 2 3 µÉ ¶§ º¸»ó, 4 µÇ¸é ·¹º§ ¾÷)
	POINT_STAT,                 // 26 ´É·ÂÄ¡ ¿Ã¸± ¼ö ÀÖ´Â °³¼ö
	POINT_SUB_SKILL,            // 27 º¸Á¶ ½ºÅ³ Æ÷ÀÎÆ®
	POINT_SKILL,                // 28 ¾×Æ¼ºê ½ºÅ³ Æ÷ÀÎÆ®
	
	POINT_MIN_ATK,				// 29 ÃÖ¼Ò ÆÄ±«·Â
	POINT_MAX_ATK,				// 30 ÃÖ´ë ÆÄ±«·Â
	POINT_PLAYTIME,             // 31 ÇÃ·¹ÀÌ½Ã°£
	POINT_HP_REGEN,             // 32 HP È¸º¹·ü
	POINT_SP_REGEN,             // 33 SP È¸º¹·ü

	POINT_BOW_DISTANCE,         // 34 È° »çÁ¤°Å¸® Áõ°¡Ä¡ (meter)

	POINT_HP_RECOVERY,          // 35 Ã¼·Â È¸º¹ Áõ°¡·®
	POINT_SP_RECOVERY,          // 36 Á¤½Å·Â È¸º¹ Áõ°¡·®

	POINT_POISON_PCT,           // 37 µ¶ È®·ü
	POINT_STUN_PCT,             // 38 ±âÀý È®·ü
	POINT_SLOW_PCT,             // 39 ½½·Î¿ì È®·ü
	POINT_CRITICAL_PCT,         // 40 Å©¸®Æ¼ÄÃ È®·ü
	POINT_PENETRATE_PCT,        // 41 °üÅëÅ¸°Ý È®·ü
	POINT_CURSE_PCT,            // 42 ÀúÁÖ È®·ü

	POINT_ATTBONUS_HUMAN,       // 43 ÀÎ°£¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_ANIMAL,      // 44 µ¿¹°¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_ORC,         // 45 ¿õ±Í¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_MILGYO,      // 46 ¹Ð±³¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_UNDEAD,      // 47 ½ÃÃ¼¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_DEVIL,       // 48 ¸¶±Í(¾Ç¸¶)¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_INSECT,      // 49 ¹ú·¹Á·
	POINT_ATTBONUS_FIRE,        // 50 È­¿°Á·
	POINT_ATTBONUS_ICE,         // 51 ºù¼³Á·
	POINT_ATTBONUS_DESERT,      // 52 »ç¸·Á·
	POINT_ATTBONUS_UNUSED0,     // 53 UNUSED0
	POINT_ATTBONUS_UNUSED1,     // 54 UNUSED1
	POINT_ATTBONUS_UNUSED2,     // 55 UNUSED2
	POINT_ATTBONUS_UNUSED3,     // 56 UNUSED3
	POINT_ATTBONUS_UNUSED4,     // 57 UNUSED4
	POINT_ATTBONUS_UNUSED5,     // 58 UNUSED5
	POINT_ATTBONUS_UNUSED6,     // 59 UNUSED6
	POINT_ATTBONUS_UNUSED7,     // 60 UNUSED7
	POINT_ATTBONUS_UNUSED8,     // 61 UNUSED8
	POINT_ATTBONUS_UNUSED9,     // 62 UNUSED9

	POINT_STEAL_HP,             // 63 »ý¸í·Â Èí¼ö
	POINT_STEAL_SP,             // 64 Á¤½Å·Â Èí¼ö

	POINT_MANA_BURN_PCT,        // 65 ¸¶³ª ¹ø

	

	POINT_DAMAGE_SP_RECOVER,   

	POINT_BLOCK,               
	POINT_DODGE,               

	POINT_RESIST_SWORD,         
	POINT_RESIST_TWOHAND,       
	POINT_RESIST_DAGGER,
	POINT_RESIST_BELL,
	POINT_RESIST_FAN,
	POINT_RESIST_BOW,
	POINT_RESIST_FIRE,
	POINT_RESIST_ELEC, 
	POINT_RESIST_MAGIC,
	POINT_RESIST_WIND,
	POINT_REFLECT_MELEE,
	POINT_REFLECT_CURSE,
	POINT_POISON_REDUCE,
	POINT_KILL_SP_RECOVER,
	POINT_EXP_DOUBLE_BONUS,    
	POINT_GOLD_DOUBLE_BONUS,    
	POINT_ITEM_DROP_BONUS,      
	POINT_POTION_BONUS,        
	POINT_KILL_HP_RECOVER,  
	POINT_IMMUNE_STUN,        
	POINT_IMMUNE_SLOW,          
	POINT_IMMUNE_FALL,         
	POINT_PARTY_ATT_GRADE,    
	POINT_PARTY_DEF_GRADE,  
	POINT_ATT_BONUS,
	POINT_DEF_BONUS,
	POINT_ATT_GRADE_BONUS,
	POINT_DEF_GRADE_BONUS,
	POINT_MAGIC_ATT_GRADE_BONUS,
	POINT_MAGIC_DEF_GRADE_BONUS,
	POINT_RESIST_NORMAL_DAMAGE,
	POINT_STAT_RESET_COUNT = 112,
	POINT_HORSE_SKILL = 113,
	POINT_MALL_ATTBONUS,	
	POINT_MALL_DEFBONUS,		
	POINT_MALL_EXPBONUS,	
	POINT_MALL_ITEMBONUS,	
	POINT_MALL_GOLDBONUS,		
	POINT_MAX_HP_PCT,		
	POINT_MAX_SP_PCT,			

	POINT_SKILL_DAMAGE_BONUS,       
	POINT_NORMAL_HIT_DAMAGE_BONUS, 
	POINT_SKILL_DEFEND_BONUS,   
	POINT_NORMAL_HIT_DEFEND_BONUS,  
	POINT_PC_BANG_EXP_BONUS,       
	POINT_PC_BANG_DROP_BONUS,   
	POINT_ENERGY = 128,
	POINT_ENERGY_END_TIME = 129,
	POINT_MIN_WEP = 200,
	POINT_MAX_WEP,
	POINT_MIN_MAGIC_WEP,
	POINT_MAX_MAGIC_WEP,
	POINT_HIT_RATE
};
enum ChatType
{
	CHAT_TYPE_TALKING,  
	CHAT_TYPE_INFO,   
	CHAT_TYPE_NOTICE, 
	CHAT_TYPE_PARTY,  
	CHAT_TYPE_GUILD,   
	CHAT_TYPE_COMMAND,	
	CHAT_TYPE_SHOUT,	
	CHAT_TYPE_WHISPER,	
	CHAT_TYPE_BIG_NOTICE,
	CHAT_TYPE_MAX_NUM,
};

enum ClientToServer
{
	HEADER_CG_LOGIN = 1,
	HEADER_CG_ATTACK = 2,
	HEADER_CG_CHAT = 3,
	HEADER_CG_PLAYER_CREATE = 4,
	HEADER_CG_PLAYER_DESTROY = 5,
	HEADER_CG_PLAYER_SELECT = 6,
	HEADER_CG_CHARACTER_MOVE = 7,
	HEADER_CG_SYNC_POSITION = 8,
	HEADER_CG_DIRECT_ENTER = 9,
	HEADER_CG_ENTERGAME = 10,
	HEADER_CG_ITEM_USE = 11,
	HEADER_CG_ITEM_DROP = 12,
	HEADER_CG_ITEM_MOVE = 13,
	HEADER_CG_ITEM_PICKUP = 15,
	HEADER_CG_QUICKSLOT_ADD = 16,
	HEADER_CG_QUICKSLOT_DEL = 17,
	HEADER_CG_QUICKSLOT_SWAP = 18,
	HEADER_CG_WHISPER = 19,
	HEADER_CG_ITEM_DROP2 = 20,
	HEADER_CG_ON_CLICK = 26,
	HEADER_CG_EXCHANGE = 27,
	HEADER_CG_CHARACTER_POSITION = 28,
	HEADER_CG_SCRIPT_ANSWER = 29,
	HEADER_CG_QUEST_INPUT_STRING = 30,
	HEADER_CG_QUEST_CONFIRM = 31,
	HEADER_CG_PVP = 41,
	HEADER_CG_SHOP = 50,
	HEADER_CG_FLY_TARGETING = 51,
	HEADER_CG_USE_SKILL = 52,
	HEADER_CG_ADD_FLY_TARGETING = 53,
	HEADER_CG_SHOOT = 54,
	HEADER_CG_MYSHOP = 55,
	HEADER_CG_ITEM_USE_TO_ITEM = 60,
	HEADER_CG_TARGET = 61,
	HEADER_CG_WARP = 65,
	HEADER_CG_SCRIPT_BUTTON = 66,
	HEADER_CG_MESSENGER = 67,
	HEADER_CG_MALL_CHECKOUT = 69,
	HEADER_CG_SAFEBOX_CHECKIN = 70,
	HEADER_CG_SAFEBOX_CHECKOUT = 71,
	HEADER_CG_PARTY_INVITE = 72,
	HEADER_CG_PARTY_INVITE_ANSWER = 73,
	HEADER_CG_PARTY_REMOVE = 74,
	HEADER_CG_PARTY_SET_STATE = 75,
	HEADER_CG_PARTY_USE_SKILL = 76,
	HEADER_CG_SAFEBOX_ITEM_MOVE = 77,
	HEADER_CG_PARTY_PARAMETER = 78,
	HEADER_CG_GUILD = 80,
	HEADER_CG_ANSWER_MAKE_GUILD = 81,
	HEADER_CG_FISHING = 82,
	HEADER_CG_GIVE_ITEM = 83,
	HEADER_CG_EMPIRE = 90,
	HEADER_CG_REFINE = 96,
	HEADER_CG_MARK_LOGIN = 100,
	HEADER_CG_MARK_CRCLIST = 101,
	HEADER_CG_MARK_UPLOAD = 102,
	HEADER_CG_MARK_IDXLIST = 104,
	HEADER_CG_CRC_REPORT = 103,
	HEADER_CG_HACK = 105,
	HEADER_CG_CHANGE_NAME = 106,
	HEADER_CG_SMS = 107,
	HEADER_CG_CHINA_MATRIX_CARD = 108,
	HEADER_CG_LOGIN2 = 109,
	HEADER_CG_DUNGEON = 110,
	HEADER_CG_LOGIN3 = 111,
	HEADER_CG_GUILD_SYMBOL_UPLOAD = 112,
	HEADER_CG_GUILD_SYMBOL_CRC = 113,
	HEADER_CG_SCRIPT_SELECT_ITEM = 114,
	HEADER_CG_LOGIN4 = 115,
	HEADER_CG_LOGIN5_OPENID = 116,
	HEADER_CG_RUNUP_MATRIX_ANSWER = 201,
	HEADER_CG_NEWCIBN_PASSPOD_ANSWER = 202,
	HEADER_CG_HS_ACK = 203,
	HEADER_CG_XTRAP_ACK = 204,
	HEADER_CG_DRAGON_SOUL_REFINE = 205,
	HEADER_CG_STATE_CHECKER = 206,
	HEADER_CG_KEY_AGREEMENT = 0xfb,
	HEADER_CG_TIME_SYNC = 0xfc,
	HEADER_CG_CLIENT_VERSION = 0xfd,
	HEADER_CG_CLIENT_VERSION2 = 0xf1,
	HEADER_CG_PONG = 0xfe,
	HEADER_CG_HANDSHAKE = 0xff,
};
enum ServerToClient
{
	HEADER_GC_CHARACTER_ADD = 1,
	HEADER_GC_CHARACTER_DEL = 2,
	HEADER_GC_CHARACTER_MOVE = 3,
	HEADER_GC_CHAT = 4,
	HEADER_GC_SYNC_POSITION = 5,
	HEADER_GC_LOGIN_SUCCESS3 = 6,
	HEADER_GC_LOGIN_FAILURE = 7,
	HEADER_GC_PLAYER_CREATE_SUCCESS = 8,
	HEADER_GC_PLAYER_CREATE_FAILURE = 9,
	HEADER_GC_PLAYER_DELETE_SUCCESS = 10,
	HEADER_GC_PLAYER_DELETE_WRONG_SOCIAL_ID = 11,
	HEADER_GC_STUN = 13,
	HEADER_GC_DEAD = 14,
	HEADER_GC_MAIN_CHARACTER = 15,
	HEADER_GC_PLAYER_POINTS = 16,
	HEADER_GC_PLAYER_POINT_CHANGE = 17,
	HEADER_GC_CHANGE_SPEED = 18,
	HEADER_GC_CHARACTER_UPDATE = 19,
	HEADER_GC_ITEM_SET = 20,
	HEADER_GC_ITEM_SET2 = 21,
	HEADER_GC_ITEM_USE = 22,
	HEADER_GC_ITEM_DROP = 23,
	HEADER_GC_ITEM_UPDATE = 25,
	HEADER_GC_ITEM_GROUND_ADD = 26,
	HEADER_GC_ITEM_GROUND_DEL = 27,
	HEADER_GC_QUICKSLOT_ADD = 28,
	HEADER_GC_QUICKSLOT_DEL = 29,
	HEADER_GC_QUICKSLOT_SWAP = 30,
	HEADER_GC_ITEM_OWNERSHIP = 31,
	HEADER_GC_LOGIN_SUCCESS4 = 32,
	HEADER_GC_ITEM_UNBIND_TIME = 33,
	HEADER_GC_WHISPER = 34,
	HEADER_GC_ALERT = 35,
	HEADER_GC_MOTION = 36,
	HEADER_GC_SHOP = 38,
	HEADER_GC_SHOP_SIGN = 39,
	HEADER_GC_DUEL_START = 40,
	HEADER_GC_PVP = 41,
	HEADER_GC_EXCHANGE = 42,
	HEADER_GC_CHARACTER_POSITION = 43,
	HEADER_GC_PING = 44,
	HEADER_GC_SCRIPT = 45,
	HEADER_GC_QUEST_CONFIRM = 46,
	HEADER_GC_MOUNT = 61,
	HEADER_GC_OWNERSHIP = 62,
	HEADER_GC_TARGET = 63,
	HEADER_GC_WARP = 65,
	HEADER_GC_ADD_FLY_TARGETING = 69,
	HEADER_GC_CREATE_FLY = 70,
	HEADER_GC_FLY_TARGETING = 71,
	HEADER_GC_SKILL_LEVEL = 72,
	HEADER_GC_SKILL_COOLTIME_END = 73,
	HEADER_GC_MESSENGER = 74,
	HEADER_GC_GUILD = 75,
	HEADER_GC_SKILL_LEVEL_NEW = 76,
	HEADER_GC_PARTY_INVITE = 77,
	HEADER_GC_PARTY_ADD = 78,
	HEADER_GC_PARTY_UPDATE = 79,
	HEADER_GC_PARTY_REMOVE = 80,
	HEADER_GC_QUEST_INFO = 81,
	HEADER_GC_REQUEST_MAKE_GUILD = 82,
	HEADER_GC_PARTY_PARAMETER = 83,
	HEADER_GC_SAFEBOX_MONEY_CHANGE = 84,
	HEADER_GC_SAFEBOX_SET = 85,
	HEADER_GC_SAFEBOX_DEL = 86,
	HEADER_GC_SAFEBOX_WRONG_PASSWORD = 87,
	HEADER_GC_SAFEBOX_SIZE = 88,
	HEADER_GC_FISHING = 89,
	HEADER_GC_EMPIRE = 90,
	HEADER_GC_PARTY_LINK = 91,
	HEADER_GC_PARTY_UNLINK = 92,
	HEADER_GC_REFINE_INFORMATION = 95,
	HEADER_GC_OBSERVER_ADD = 96,
	HEADER_GC_OBSERVER_REMOVE = 97,
	HEADER_GC_OBSERVER_MOVE = 98,
	HEADER_GC_VIEW_EQUIP = 99,
	HEADER_GC_MARK_BLOCK = 100,
	HEADER_GC_MARK_DIFF_DATA = 101,
	HEADER_GC_MARK_IDXLIST = 102,
	HEADER_GC_TIME = 106,
	HEADER_GC_CHANGE_NAME = 107,
	HEADER_GC_DUNGEON = 110,
	HEADER_GC_WALK_MODE = 111,
	HEADER_GC_CHANGE_SKILL_GROUP = 112,
	HEADER_GC_MAIN_CHARACTER2_EMPIRE = 113,
	HEADER_GC_SEPCIAL_EFFECT = 114,
	HEADER_GC_NPC_POSITION = 115,
	HEADER_GC_CHINA_MATRIX_CARD = 116,
	HEADER_GC_CHARACTER_UPDATE2 = 117,
	HEADER_GC_LOGIN_KEY = 118,
	HEADER_GC_REFINE_INFORMATION_NEW = 119,
	HEADER_GC_CHARACTER_ADD2 = 120,
	HEADER_GC_CHANNEL = 121,
	HEADER_GC_MALL_OPEN = 122,
	HEADER_GC_TARGET_UPDATE = 123,
	HEADER_GC_TARGET_DELETE = 124,
	HEADER_GC_TARGET_CREATE_NEW = 125,
	HEADER_GC_AFFECT_ADD = 126,
	HEADER_GC_AFFECT_REMOVE = 127,
	HEADER_GC_MALL_SET = 128,
	HEADER_GC_MALL_DEL = 129,
	HEADER_GC_LAND_LIST = 130,
	HEADER_GC_LOVER_INFO = 131,
	HEADER_GC_LOVE_POINT_UPDATE = 132,
	HEADER_GC_GUILD_SYMBOL_DATA = 133,
	HEADER_GC_DIG_MOTION = 134,
	HEADER_GC_DAMAGE_INFO = 135,
	HEADER_GC_CHAR_ADDITIONAL_INFO = 136,
	HEADER_GC_MAIN_CHARACTER3_BGM = 137,
	HEADER_GC_MAIN_CHARACTER4_BGM_VOL = 138,
	HEADER_GC_AUTH_SUCCESS = 150,
	HEADER_GC_PANAMA_PACK = 151,
	HEADER_GC_HYBRIDCRYPT_KEYS = 152,
	HEADER_GC_HYBRIDCRYPT_SDB = 153,
	HEADER_GC_AUTH_SUCCESS_OPENID = 154,
	HEADER_GC_RUNUP_MATRIX_QUIZ = 201,
	HEADER_GC_NEWCIBN_PASSPOD_REQUEST = 202,
	HEADER_GC_NEWCIBN_PASSPOD_FAILURE = 203,
	HEADER_GC_HS_REQUEST = 204,
	HEADER_GC_XTRAP_CS1_REQUEST = 205,
	HEADER_GC_SPECIFIC_EFFECT = 208,
	HEADER_GC_DRAGON_SOUL_REFINE = 209,
	HEADER_GC_RESPOND_CHANNELSTATUS = 210,
	HEADER_GC_KEY_AGREEMENT_COMPLETED = 0xfa,
	HEADER_GC_KEY_AGREEMENT = 0xfb,
	HEADER_GC_HANDSHAKE_OK = 0xfc,
	HEADER_GC_PHASE = 0xfd,
	HEADER_GC_BINDUDP = 0xfe,
	HEADER_GC_HANDSHAKE = 0xff,
};
enum
{
	POINT_MAX_NUM = 255,
	CHARACTER_NAME_MAX_LEN = 24,
#if defined(LOCALE_SERVICE_JAPAN)
	PLAYER_NAME_MAX_LEN = 16,
#else
	PLAYER_NAME_MAX_LEN = 12,
#endif
};

#if defined(METINPL) || defined(DREIKON)
typedef MapaGlobal::std::map<DWORD, DWORD *>	TCharacterInstanceMap;
#else
typedef std::map<DWORD, DWORD*>	TCharacterInstanceMap;
#endif


#pragma pack (push, 1)

#define WORD_MAX 0xffff
typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
	//BYTE unk;
	SItemPos()
	{
		window_type = INVENTORY;
		cell = WORD_MAX;
	}
	SItemPos(BYTE _window_type, WORD _cell)
	{
		window_type = _window_type;
		cell = _cell;
		//unk = 0x00;
	}
} TItemPos;
#pragma pack(pop)
#pragma pack (push, 1)
typedef struct command_attack
{
	BYTE	header;
	BYTE	bType;			// °ø°Ý À¯Çü
	DWORD	dwVictimVID;	// Àû VID
	BYTE	bCRCMagicCubeProcPiece;
	BYTE	bCRCMagicCubeFilePiece;
} TPacketCGAttack;
typedef struct packet_fly
{
	BYTE        bHeader;
	BYTE        bType;
	DWORD       dwStartVID;
	DWORD       dwEndVID;
} TPacketGCCreateFly;
typedef struct packet_add_char
{
	BYTE        header;

	DWORD       dwVID;

} TPacketGCCharacterAdd;

typedef struct packet_update_char
{
	BYTE        header;
	DWORD       dwVID;
} TPacketGCCharacterUpdate;

typedef struct packet_sfishing
{
	BYTE header;
} TPacketCGFishingX;
typedef struct packet_fishing
{
	BYTE header;
	BYTE subheader;
	DWORD info;
	BYTE dir;
#ifdef ESGAROTH
	DWORD count;
#endif
} TPacketGCFishing;



#ifdef PANGEA
typedef struct packet_fishing_pangea
{
	BYTE header;
	BYTE subheader;
	
	DWORD vid;
BYTE unk;
	BYTE count;

} TPacketGCFishingPangea;
#else


#endif


typedef struct packet_ground_del_item
{
	BYTE		header;
	DWORD		vid;
} TPacketGCItemGroundDel;

typedef struct packet_ground_add_item
{
	BYTE        bHeader;
	long        lX;
	long		lY;
	long		lZ;

	DWORD       dwVID;
	DWORD       dwVnum;
} TPacketGCItemGroundAdd;

typedef struct packet_item_ownership
{
	BYTE        bHeader;
	DWORD       dwVID;
	char        szName[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGCItemOwnership;

typedef struct packet_del_char
{
	BYTE	header;
	DWORD	dwVID;
} TPacketGCCharacterDelete;


typedef struct packet_whisper   // °¡º¯ ÆÐÅ¶    
{
	BYTE        bHeader;
	WORD        wSize;
	BYTE        bType;
	char        szNameFrom[CHARACTER_NAME_MAX_LEN + 1];
} TPacketGCWhisper;

typedef struct SMobSkillLevel
{
	DWORD       dwVnum;
	BYTE        bLevel;
} TMobSkillLevel;
typedef struct SMobTable_r255
{
	DWORD	dwVnum;
	char	szName[CHARACTER_NAME_MAX_LEN + 1];
	char	szLocaleName[CHARACTER_NAME_MAX_LEN + 1];

	BYTE	bType;			// Monster, NPC
	BYTE	bRank;			// PAWN, KNIGHT, KING
	BYTE	bBattleType;		// MELEE, etc..
	BYTE	bLevel;			// Level
	BYTE	bSize;

	DWORD	dwGoldMin;
	DWORD	dwGoldMax;
	DWORD	dwExp;
	DWORD	dwMaxHP;
	BYTE	bRegenCycle;
	BYTE	bRegenPercent;
	WORD	wDef;

	DWORD	dwAIFlag;
	DWORD	dwRaceFlag;
	DWORD	dwImmuneFlag;

	BYTE	bStr, bDex, bCon, bInt;
	DWORD	dwDamageRange[2];

	short	sAttackSpeed;
	short	sMovingSpeed;
	BYTE	bAggresiveHPPct;
	WORD	wAggressiveSight;
	WORD	wAttackRange;

	char	cEnchants[6];
	char	cResists[6];

	DWORD	dwResurrectionVnum;
	DWORD	dwDropItemVnum;

	BYTE	bMountCapacity;
	BYTE	bOnClickType;

	BYTE	bEmpire;
	char	szFolder[64 + 1];

	float	fDamMultiply;

	DWORD	dwSummonVnum;
	DWORD	dwDrainSP;
	DWORD	dwMobColor;
	DWORD	dwPolymorphItemVnum;

	TMobSkillLevel Skills[5];

	BYTE	bBerserkPoint;
	BYTE	bStoneSkinPoint;
	BYTE	bGodSpeedPoint;
	BYTE	bDeathBlowPoint;
	BYTE	bRevivePoint;
} TMobTable_r255;
typedef TMobTable_r255 SMobTable, TMobTable;
//typedef struct SMobTable_r255
//{
//	DWORD       dwVnum;
//	char        szName[CHARACTER_NAME_MAX_LEN + 1];
//	char        szLocaleName[CHARACTER_NAME_MAX_LEN + 1];
//
//	BYTE        bType;                  // Monster, NPC
//#ifdef SAMIAS2
//	BYTE		unk[72];
//#endif
//#ifdef RUBINUM
//	BYTE		unk[249];
//#endif
//	BYTE        bRank;                  // PAWN, KNIGHT, KING
//	//BYTE        bBattleType;            // MELEE, etc..
//	//BYTE        bLevel;                 // Level
//	//BYTE        bSize;
//
//	//DWORD       dwGoldMin;
//	//DWORD       dwGoldMax;
//	//DWORD       dwExp;
//	//DWORD       dwMaxHP;
//	//BYTE        bRegenCycle;
//	//BYTE        bRegenPercent;
//	//WORD        wDef;
//
//	//DWORD       dwAIFlag;
//	//DWORD       dwRaceFlag;
//	//DWORD       dwImmuneFlag;
//
//	//BYTE        bStr, bDex, bCon, bInt;
//	//DWORD       dwDamageRange[2];
//
//	//short       sAttackSpeed;
//	//short       sMovingSpeed;
//	//BYTE        bAggresiveHPPct;
//	//WORD        wAggressiveSight;
//	//WORD        wAttackRange;
//
//	//char        cEnchants[6];
//	//char        cResists[6];
//
//	//DWORD       dwResurrectionVnum;
//	//DWORD       dwDropItemVnum;
//
//	//BYTE        bMountCapacity;
//	//BYTE        bOnClickType;
//
//	//BYTE        bEmpire;
//	//char        szFolder[64 + 1];
//	//float       fDamMultiply;
//	//DWORD       dwSummonVnum;
//	//DWORD       dwDrainSP;
//	//DWORD		dwMonsterColor;
//	//DWORD       dwPolymorphItemVnum;
//
//	//TMobSkillLevel	Skills[5];
//
//	//BYTE		bBerserkPoint;
//	//BYTE		bStoneSkinPoint;
//	//BYTE		bGodSpeedPoint;
//	//BYTE		bDeathBlowPoint;
//	//BYTE		bRevivePoint;
//} TMobTable_r255;
//typedef TMobTable_r255 SMobTable, TMobTable;


typedef struct SGroundItemInstance
{
	DWORD					Instance;
	DWORD					dwVirtualNumber;
	D3DXVECTOR3				v3EndPosition;
	D3DXVECTOR3				v3RotationAxis;
	D3DXQUATERNION			qEnd;
	D3DXVECTOR3				v3Center;
	DWORD* ThingInstance;
	DWORD					dwStartTime;
	DWORD					dwEndTime;
	DWORD					eDropSoundType;
#ifdef HUJGOWIE_SEREMO_JEST_ROZCZEPANY
	BYTE					unk[480];
#endif
#ifdef METINPL
	BYTE					unk2[756];
	char  stOwnership[24];
#else
	std::string				stOwnership;
#endif
} TGroundItemInstance;

#ifdef METINPL
typedef MapaGlobal::std::map<DWORD, TGroundItemInstance*>		TGroundItemInstanceMap;
#else
typedef std::map<DWORD, TGroundItemInstance*>		TGroundItemInstanceMap;
#endif

typedef struct SAttachingData
{
	DWORD dwType;

	BOOL isAttaching;
	DWORD dwAttachingModelIndex;
	std::string strAttachingBoneName;

	DWORD* pCollisionData;
	DWORD* pEffectData;
	DWORD* pObjectData;
} TAttachingData;

typedef std::vector<TAttachingData> TAttachingDataVector;


typedef struct SItemTable_r156
{
	DWORD       dwVnum;
	DWORD       dwVnumRange;
	char        szName[24 + 1];
	char        szLocaleName[24 + 1];
	BYTE        bType;
	BYTE        bSubType;
	BYTE        bWeight;
	BYTE        bSize;
	DWORD       dwAntiFlags;
	DWORD       dwFlags;
	DWORD       dwWearFlags;
	DWORD       dwImmuneFlag;
	DWORD       dwIBuyItemPrice;
	DWORD		dwISellItemPrice;
} TItemTable;

typedef struct CItemData
{
#ifdef PANGEA
	BYTE	unk[200];

#endif
#ifdef RUBINUM
	BYTE	unk[252];
#endif
#ifdef VIDGAR
	BYTE	unk[228];

#endif
#ifdef METINPL
	BYTE	unk2[60];
#endif
	
	TItemTable m_ItemTable;
	
} TCItemData;

#ifdef METINPL
typedef MapaGlobal::std::map<DWORD, TCItemData*>		TItemMap;
#else
typedef std::map<DWORD, TCItemData*>		TItemMap;
#endif

#pragma pack(pop)
#pragma pack(push, 4)
typedef struct SEterPackIndex
{
	long			id;
	char			filename[161 + 1];
	DWORD			filename_crc;
	long			real_data_size;
	long			data_size;
#ifdef CHECKSUM_CHECK_MD5
	BYTE			MD5Digest[16];
#else
	DWORD			data_crc;
#endif
	long			data_position;
	char			compressed_type;
} TEterPackIndex;
#pragma pack(pop)


#ifdef METINPL
char* sServerToClient[] = {

	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN"
};
char* sClientToServer[] = {
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN"

};
#else
char* sServerToClient[] = {

	"UNKNOWN",
	"HEADER_GC_CHARACTER_ADD",
	"HEADER_GC_CHARACTER_DEL",
	"HEADER_GC_CHARACTER_MOVE",
	"HEADER_GC_CHAT",
	"HEADER_GC_SYNC_POSITION",
	"HEADER_GC_LOGIN_SUCCESS3",
	"HEADER_GC_LOGIN_FAILURE",
	"HEADER_GC_PLAYER_CREATE_SUCCESS",
	"HEADER_GC_PLAYER_CREATE_FAILURE",
	"HEADER_GC_PLAYER_DELETE_SUCCESS",
	"HEADER_GC_PLAYER_DELETE_WRONG_SOCIAL_ID",
	"UNKNOWN",
	"HEADER_GC_STUN",
	"HEADER_GC_DEAD",
	"HEADER_GC_MAIN_CHARACTER",
	"HEADER_GC_PLAYER_POINTS",
	"HEADER_GC_PLAYER_POINT_CHANGE",
	"HEADER_GC_CHANGE_SPEED",
	"HEADER_GC_CHARACTER_UPDATE",
	"HEADER_GC_ITEM_SET",
	"HEADER_GC_ITEM_SET2",
	"HEADER_GC_ITEM_USE",
	"HEADER_GC_ITEM_DROP",
	"UNKNOWN",
	"HEADER_GC_ITEM_UPDATE",
	"HEADER_GC_ITEM_GROUND_ADD",
	"HEADER_GC_ITEM_GROUND_DEL",
	"HEADER_GC_QUICKSLOT_ADD",
	"HEADER_GC_QUICKSLOT_DEL",
	"HEADER_GC_QUICKSLOT_SWAP",
	"HEADER_GC_ITEM_OWNERSHIP",
	"HEADER_GC_LOGIN_SUCCESS4",
	"HEADER_GC_ITEM_UNBIND_TIME",
	"HEADER_GC_WHISPER",
	"HEADER_GC_ALERT",
	"HEADER_GC_MOTION",
	"UNKNOWN",
	"HEADER_GC_SHOP",
	"HEADER_GC_SHOP_SIGN",
	"HEADER_GC_DUEL_START",
	"HEADER_GC_PVP",
	"HEADER_GC_EXCHANGE",
	"HEADER_GC_CHARACTER_POSITION",
	"HEADER_GC_PING",
	"HEADER_GC_SCRIPT",
	"HEADER_GC_QUEST_CONFIRM",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_MOUNT",
	"HEADER_GC_OWNERSHIP",
	"HEADER_GC_TARGET",
	"UNKNOWN",
	"HEADER_GC_WARP",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_ADD_FLY_TARGETING",
	"HEADER_GC_CREATE_FLY",
	"HEADER_GC_FLY_TARGETING",
	"HEADER_GC_SKILL_LEVEL",
	"HEADER_GC_SKILL_COOLTIME_END",
	"HEADER_GC_MESSENGER",
	"HEADER_GC_GUILD",
	"HEADER_GC_SKILL_LEVEL_NEW",
	"HEADER_GC_PARTY_INVITE",
	"HEADER_GC_PARTY_ADD",
	"HEADER_GC_PARTY_UPDATE",
	"HEADER_GC_PARTY_REMOVE",
	"HEADER_GC_QUEST_INFO",
	"HEADER_GC_REQUEST_MAKE_GUILD",
	"HEADER_GC_PARTY_PARAMETER",
	"HEADER_GC_SAFEBOX_MONEY_CHANGE",
	"HEADER_GC_SAFEBOX_SET",
	"HEADER_GC_SAFEBOX_DEL",
	"HEADER_GC_SAFEBOX_WRONG_PASSWORD",
	"HEADER_GC_SAFEBOX_SIZE",
	"HEADER_GC_FISHING",
	"HEADER_GC_EMPIRE",
	"HEADER_GC_PARTY_LINK",
	"HEADER_GC_PARTY_UNLINK",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_REFINE_INFORMATION",
	"HEADER_GC_OBSERVER_ADD",
	"HEADER_GC_OBSERVER_REMOVE",
	"HEADER_GC_OBSERVER_MOVE",
	"HEADER_GC_VIEW_EQUIP",
	"HEADER_GC_MARK_BLOCK",
	"HEADER_GC_MARK_DIFF_DATA",
	"HEADER_GC_MARK_IDXLIST",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_TIME",
	"HEADER_GC_CHANGE_NAME",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_DUNGEON",
	"HEADER_GC_WALK_MODE",
	"HEADER_GC_CHANGE_SKILL_GROUP",
	"HEADER_GC_MAIN_CHARACTER2_EMPIRE",
	"HEADER_GC_SEPCIAL_EFFECT",
	"HEADER_GC_NPC_POSITION",
	"HEADER_GC_CHINA_MATRIX_CARD",
	"HEADER_GC_CHARACTER_UPDATE2",
	"HEADER_GC_LOGIN_KEY",
	"HEADER_GC_REFINE_INFORMATION_NEW",
	"HEADER_GC_CHARACTER_ADD2",
	"HEADER_GC_CHANNEL",
	"HEADER_GC_MALL_OPEN",
	"HEADER_GC_TARGET_UPDATE",
	"HEADER_GC_TARGET_DELETE",
	"HEADER_GC_TARGET_CREATE_NEW",
	"HEADER_GC_AFFECT_ADD",
	"HEADER_GC_AFFECT_REMOVE",
	"HEADER_GC_MALL_SET",
	"HEADER_GC_MALL_DEL",
	"HEADER_GC_LAND_LIST",
	"HEADER_GC_LOVER_INFO",
	"HEADER_GC_LOVE_POINT_UPDATE",
	"HEADER_GC_GUILD_SYMBOL_DATA",
	"HEADER_GC_DIG_MOTION",
	"HEADER_GC_DAMAGE_INFO",
	"HEADER_GC_CHAR_ADDITIONAL_INFO",
	"HEADER_GC_MAIN_CHARACTER3_BGM",
	"HEADER_GC_MAIN_CHARACTER4_BGM_VOL",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_AUTH_SUCCESS",
	"HEADER_GC_PANAMA_PACK",
	"HEADER_GC_HYBRIDCRYPT_KEYS",
	"HEADER_GC_HYBRIDCRYPT_SDB",
	"HEADER_GC_AUTH_SUCCESS_OPENID",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_RUNUP_MATRIX_QUIZ",
	"HEADER_GC_NEWCIBN_PASSPOD_REQUEST",
	"HEADER_GC_NEWCIBN_PASSPOD_FAILURE",
	"HEADER_GC_HS_REQUEST",
	"HEADER_GC_XTRAP_CS1_REQUEST",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_SPECIFIC_EFFECT",
	"HEADER_GC_DRAGON_SOUL_REFINE",
	"HEADER_GC_RESPOND_CHANNELSTATUS",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_GC_KEY_AGREEMENT_COMPLETED",
	"HEADER_GC_KEY_AGREEMENT",
	"HEADER_GC_HANDSHAKE_OK",
	"HEADER_GC_PHASE",
	"HEADER_GC_BINDUDP",
	"HEADER_GC_HANDSHAKE"
};
char* sClientToServer[] = {
	"UNKNOWN",
	"HEADER_CG_LOGIN",
	"HEADER_CG_ATTACK",
	"HEADER_CG_CHAT",
	"HEADER_CG_PLAYER_CREATE",
	"HEADER_CG_PLAYER_DESTROY",
	"HEADER_CG_PLAYER_SELECT",
	"HEADER_CG_CHARACTER_MOVE",
	"HEADER_CG_SYNC_POSITION",
	"HEADER_CG_DIRECT_ENTER",
	"HEADER_CG_ENTERGAME",
	"HEADER_CG_ITEM_USE",
	"HEADER_CG_ITEM_DROP",
	"HEADER_CG_ITEM_MOVE",
	"UNKNOWN",
	"HEADER_CG_ITEM_PICKUP",
	"HEADER_CG_QUICKSLOT_ADD",
	"HEADER_CG_QUICKSLOT_DEL",
	"HEADER_CG_QUICKSLOT_SWAP",
	"HEADER_CG_WHISPER",
	"HEADER_CG_ITEM_DROP2",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_ON_CLICK",
	"HEADER_CG_EXCHANGE",
	"HEADER_CG_CHARACTER_POSITION",
	"HEADER_CG_SCRIPT_ANSWER",
	"HEADER_CG_QUEST_INPUT_STRING",
	"HEADER_CG_QUEST_CONFIRM",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_PVP",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_SHOP",
	"HEADER_CG_FLY_TARGETING",
	"HEADER_CG_USE_SKILL",
	"HEADER_CG_ADD_FLY_TARGETING",
	"HEADER_CG_SHOOT",
	"HEADER_CG_MYSHOP",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_ITEM_USE_TO_ITEM",
	"HEADER_CG_TARGET",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_WARP",
	"HEADER_CG_SCRIPT_BUTTON",
	"HEADER_CG_MESSENGER",
	"UNKNOWN",
	"HEADER_CG_MALL_CHECKOUT",
	"HEADER_CG_SAFEBOX_CHECKIN",
	"HEADER_CG_SAFEBOX_CHECKOUT",
	"HEADER_CG_PARTY_INVITE",
	"HEADER_CG_PARTY_INVITE_ANSWER",
	"HEADER_CG_PARTY_REMOVE",
	"HEADER_CG_PARTY_SET_STATE",
	"HEADER_CG_PARTY_USE_SKILL",
	"HEADER_CG_SAFEBOX_ITEM_MOVE",
	"HEADER_CG_PARTY_PARAMETER",
	"UNKNOWN",
	"HEADER_CG_GUILD",
	"HEADER_CG_ANSWER_MAKE_GUILD",
	"HEADER_CG_FISHING",
	"HEADER_CG_GIVE_ITEM",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_EMPIRE",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_REFINE",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_MARK_LOGIN",
	"HEADER_CG_MARK_CRCLIST",
	"UNKNOWN",
	"HEADER_CG_CRC_REPORT",
	"HEADER_CG_MARK_IDXLIST",
	"HEADER_CG_HACK",
	"HEADER_CG_CHANGE_NAME",
	"HEADER_CG_SMS",
	"HEADER_CG_CHINA_MATRIX_CARD",
	"HEADER_CG_LOGIN2",
	"HEADER_CG_DUNGEON",
	"HEADER_CG_LOGIN3",
	"HEADER_CG_GUILD_SYMBOL_UPLOAD",
	"HEADER_CG_GUILD_SYMBOL_CRC",
	"HEADER_CG_SCRIPT_SELECT_ITEM",
	"HEADER_CG_LOGIN4",
	"HEADER_CG_LOGIN5_OPENID",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_RUNUP_MATRIX_ANSWER",
	"HEADER_CG_NEWCIBN_PASSPOD_ANSWER",
	"HEADER_CG_HS_ACK",
	"HEADER_CG_XTRAP_ACK",
	"HEADER_CG_DRAGON_SOUL_REFINE",
	"HEADER_CG_STATE_CHECKER",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_CLIENT_VERSION2",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"UNKNOWN",
	"HEADER_CG_KEY_AGREEMENT",
	"HEADER_CG_TIME_SYNC",
	"HEADER_CG_CLIENT_VERSION",
	"HEADER_CG_PONG",
	"HEADER_CG_HANDSHAKE"

};
#endif




//static const unsigned int RudaBold_compressed_size = 18630;
//static const unsigned int RudaBold_compressed_data[18632 / 4] =
//{
//	0x0000bc57, 0x00000000, 0x2c600000, 0x00000400, 0x00010025, 0x82110000, 0x00042604, 0x49534410, 0x820d8247, 0x2460210c, 0x082c0782, 0x4d544646,
//	0x177de35f, 0x405a0000, 0x1c280f82, 0x46454447, 0x04002101, 0x5c200f82, 0x20280f82, 0x534f5047, 0x81757f80, 0x7c300f82, 0x76050000, 0x42555347,
//	0xfeb8ffb8, 0xf45f0000, 0x302c1f82, 0x322f534f, 0x909d8987, 0x98010000, 0x60280f82, 0x70616d63, 0x91eda082, 0xc8202b82, 0xda241382, 0x70736167,
//	0x10201782, 0x38203f82, 0x082b0782, 0x66796c67, 0xa8d2f0f4, 0x82090000, 0xec45292f, 0x64616568, 0x195ee102, 0x1c202b82, 0x36211f82, 0x23108268,
//	0x6c03ff06, 0x54200f82, 0x24280f82, 0x78746d68, 0x6532fcf4, 0xf8300f82, 0xd0030000, 0x61636f6c, 0x5829de3a, 0xac070000, 0xea281382, 0x7078616d,
//	0x3e003b01, 0x78200b82, 0x202c2f82, 0x656d616e, 0x4d396417, 0x844f0000, 0x7d2c2382, 0x74736f70, 0x4955c244, 0x04570000, 0x32283f82, 0x70657270,
//	0x858c0668, 0xa4201b82, 0x07222f82, 0x05820100, 0xc500012e, 0x3433b43b, 0xf53c0f5f, 0xe8030b00, 0x00241182, 0xcb092dcb, 0xd5320783, 0xff221032,
//	0x03fbfed9, 0x00870389, 0x00080001, 0x00850002, 0x4d820120, 0xd9fe9a22, 0xc7270582, 0xd7ffd9ff, 0x82008903, 0x861a8511, 0x84f42005, 0x00f42411,
//	0x8405003b, 0x00022411, 0x84010000, 0x82402013, 0x24028309, 0x02de0102, 0x231d83bc, 0x8a02bc02, 0x8c201082, 0x01290785, 0x003200dd, 0x020000fa,
//	0x20008a00, 0x2b0b8a23, 0x72797000, 0x00200073, 0x03ac2020, 0x9a228385, 0x1f822701, 0x03820120, 0x49020024, 0x0782bb02, 0x02002024, 0x07821401,
//	0x01210282, 0x2004824d, 0x3e7c82eb, 0x014a001c, 0x02300077, 0x0211003b, 0x031c0013, 0x022d002c, 0x001700a7, 0x013500d0, 0x823d0050, 0x172c0803,
//	0x1c00a401, 0x2c007602, 0x38002001, 0x26003f01, 0x44001501, 0xfcffce01, 0x34005402, 0x23001502, 0x2b003502, 0x08000f02, 0x15003002, 0x14220f82,
//	0x17823f02, 0x1b00022e, 0x27003302, 0x34003d02, 0x64004b01, 0x4f380382, 0x43008e02, 0x2c007d02, 0x39009002, 0x1700e101, 0x3a003f03, 0xfdff1e02,
//	0x612a1382, 0x40005c02, 0x61008f02, 0x03821702, 0x03820920, 0x0f827c20, 0x6100b024, 0x03823901, 0xf3ff5624, 0x07826d02, 0x6100d328, 0x5d003503,
//	0x1f82bb02, 0x1f82a820, 0x07825c20, 0x0782b720, 0x07829b20, 0x25001e24, 0x9382f201, 0x0b82ac20, 0x10003924, 0xb3821103, 0x05004332, 0x03002302,
//	0x1d002d02, 0x62004a01, 0x0f00d001, 0x21380782, 0x32000802, 0x0d002c02, 0xa2006f02, 0x2e004c02, 0x52005702, 0x3e001602, 0x3e2a8382, 0x3e004d02,
//	0x2a006901, 0xbb822102, 0x4d005f34, 0x58003601, 0xe7ff4801, 0x52003b02, 0x52001801, 0x7f82ad03, 0x03826c20, 0x2f825620, 0x37825d20, 0x2f825820,
//	0x0f82a020, 0x2f000030, 0x25008001, 0x50006b02, 0x0600ef01, 0x5f82ef02, 0x09001032, 0xfbfff301, 0x1a00e801, 0x3000bb01, 0x5f001c01, 0x1a280782,
//	0x13001802, 0x4a001b01, 0x452a7384, 0x90024000, 0x3c024300, 0x1f831100, 0x822a0221, 0x004c289b, 0x0047037f, 0x82b30140, 0x00092a87, 0x00560220,
//	0x005c0114, 0x2d138336, 0x89004a02, 0x12006201, 0x2c004402, 0x53828a01, 0x28007530, 0xa7006f02, 0x50006c02, 0x2900b902, 0xaf824801, 0xbf00f834,
//	0x24008801, 0x10007301, 0x1f000902, 0x2400b903, 0x0382c703, 0x2700892a, 0x1600e101, 0xfdff1e02, 0x03250393, 0x02f9ff28, 0x208f825c, 0x06874117,
//	0x01270786, 0x01fdff39, 0x822d0039, 0x82fc2007, 0x02032607, 0x022c009b, 0x202382bb, 0x8f2b82a9, 0x004b2303, 0x1383022f, 0x1f82ac20, 0x2328038b,
//	0x68020300, 0x85025f00, 0x4c231782, 0x92022e00, 0x97032903, 0x16023900, 0x4d023e00, 0x0127038d, 0x01f7ff36, 0x82160036, 0x82f32007, 0x02012407,
//	0x8241005b, 0x025d22ef, 0x8f278256, 0x827c2003, 0x0057269b, 0x006b023f, 0x27038b50, 0xfbfff301, 0x60006502, 0x6b220784, 0xcb820800, 0x4f82f920,
//	0x4f82eb20, 0x7c026122, 0x63289382, 0x4b015800, 0x4701f3ff, 0x3305eb41, 0x5d003b02, 0x6100d301, 0x5200a301, 0x1f00d001, 0x15004601, 0x6c28f384,
//	0xad035d00, 0xb1034000, 0x9b207b82, 0x03823782, 0x00a00124, 0x0785023c, 0x3f843e20, 0x37822220, 0xd9ff092e, 0x1600e800, 0x57002402, 0x63003e01,
//	0x2a28d382, 0x3e003803, 0x3700eb00, 0x01270383, 0x01380002, 0x8434009b, 0x00c12a03, 0x00880136, 0x002c013e, 0x2c038220, 0x0062021f, 0x00140126,
//	0x00030100, 0x087b8231, 0x77013e20, 0xdd018100, 0xe6017200, 0x48019700, 0x1b01f8ff, 0x63013000, 0xfb010500, 0x00004000, 0x03860300, 0x01001c22,
//	0x00240982, 0x0300d400, 0x1c240984, 0xb8000400, 0x2a221182, 0x09822000, 0x000a2a08, 0x01ff007e, 0x01350129, 0x01440138, 0x02590154, 0x02c70237,
//	0x03dc02da, 0x20bc0307, 0x201a2014, 0x2022201e, 0xffac203a, 0x2e3382ff, 0x01a10020, 0x01310127, 0x013f0137, 0x82560152, 0x88c6202b, 0x2013242b,
//	0x821c2018, 0x8339202b, 0xff28082b, 0xffc1ffe3, 0xff93ff9a, 0xff8cff92, 0xfe7eff7f, 0xfe13fea1, 0xfd00fe01, 0xe0bafcd6, 0xe0c8e0cb, 0xe0c4e0c7,
//	0x003de0ae, 0x5a829b85, 0x012202a3, 0x30880006, 0x00020123, 0x0df64400, 0x00000023, 0x08f68201, 0x06050494, 0x0a090807, 0x0e0d0c0b, 0x1211100f,
//	0x16151413, 0x1a191817, 0x1e1d1c1b, 0x2221201f, 0x26252423, 0x2a292827, 0x2e2d2c2b, 0x3231302f, 0x36353433, 0x3a393837, 0x3e3d3c3b, 0x4241403f,
//	0x46454443, 0x4a494847, 0x4e4d4c4b, 0x5251504f, 0x56555453, 0x5a595857, 0x5e5d5c5b, 0x0061605f, 0x8a888685, 0xa29d9792, 0xa4a5a3a1, 0xa9aaa8a6,
//	0xadaeacab, 0xb4b2b0af, 0xb6b7b5b3, 0xbdbcbabb, 0x64637100, 0xa077e668, 0x75006a6f, 0x99870069, 0x00007200, 0x9b827666, 0x6b000029, 0xb9a7007b,
//	0x836d6280, 0x7c6c360c, 0x84810000, 0xded2d196, 0xe0e4e3df, 0xc000b8e1, 0xe7e90000, 0x081a82e8, 0xe5e27827, 0x828b8300, 0x8f8e898c, 0x95948d90,
//	0x9c9b9300, 0xdcd9c49a, 0xdb000070, 0xda000079, 0x01b80000, 0x04b085ff, 0x882a828d, 0x14ca0902, 0x5c002c00, 0xd600a000, 0x2e011e01, 0x5a014601,
//	0x9a018601, 0xb801ac01, 0xd601c401, 0x1e020602, 0x7a024602, 0xc4029802, 0x1003fa02, 0x7c034803, 0xa6038e03, 0xce03ba03, 0x1604e203, 0x80046604,
//	0xe604bc04, 0x28051005, 0x6e053e05, 0x9a058805, 0xd005b205, 0x0006e005, 0x50061806, 0xb0067606, 0x1e07dc06, 0x56073207, 0x8a076a07, 0xc007a807,
//	0xec07da07, 0x1008fe07, 0x32082608, 0x78084008, 0xcc08a208, 0x3409fe08, 0x98095409, 0xc809b609, 0x040ae609, 0x440a100a, 0x840a620a, 0xe20ab60a,
//	0x3a0b000b, 0x820b5c0b, 0xb60b960b, 0xea0bd20b, 0x380c040c, 0x7a0c460c, 0xaa0c960c, 0xf80cd40c, 0x520d2e0d, 0xba0d660d, 0x0e0ecc0d, 0x600e420e,
//	0x7a0e6e0e, 0xcc0ebe0e, 0x000fe40e, 0x580f240f, 0x8a0f660f, 0xb80fa40f, 0xe80fd00f, 0x24100610, 0x9e105e10, 0x2c11f610, 0x70114e11, 0xc8119811,
//	0x1c12ec11, 0x7a124212, 0xba129a12, 0x0213de12, 0x36131c13, 0x72135413, 0xd413a413, 0x54141414, 0xea149a14, 0x48152e15, 0xb4158815, 0x1016e015,
//	0x5e163e16, 0xbc168816, 0x3c17fc16, 0xce178017, 0x60181218, 0xf018b818, 0x6c192e19, 0xee19ae19, 0x1a1a041a, 0x4c1a341a, 0xba1a861a, 0x0e1be41a,
//	0x741b3c1b, 0xb81ba01b, 0x1e1cf01b, 0x7e1c4c1c, 0xd01cb01c, 0x221d001d, 0x701d481d, 0xa01d941d, 0xea1dc41d, 0x321e0e1e, 0x7a1e5e1e, 0xa21e901e,
//	0xd41ebc1e, 0x1a1ff41e, 0xa21f5c1f, 0x0c20d41f, 0x6c203420, 0xae209620, 0xd620c220, 0x1021f420, 0x2a211c21, 0x4c213821, 0x74216021, 0xb8219621,
//	0xec21d821, 0x1022fe21, 0x01824422, 0x6a225836, 0x84227622, 0xa6229222, 0xd822c422, 0x0000f622, 0x4a000200, 0xd43e0582, 0x0300bb02, 0x00000700,
//	0x03330337, 0x15333507, 0x107f0f5e, 0x01c48a74, 0xc409fef7, 0x21826d6d, 0x30000234, 0x4701d001, 0x0400d102, 0x00000a00, 0x23071513, 0x04822103,
//	0x96012f3a, 0x01104511, 0x0f451217, 0x21d10201, 0x210101e0, 0x0032cfe0, 0x11000200, 0x1e260482, 0x1b00b702, 0x57821f00, 0x37333523, 0x23038223,
//	0x37330733, 0x15230382, 0x82330723, 0x37232603, 0x3f230723, 0x081a8201, 0x14601120, 0x621d6151, 0x631d731d, 0x1461511d, 0x621c6252, 0x631c731c,
//	0x1473731c, 0x8263b773, 0x0082b863, 0xb7200682, 0x63210082, 0x388e8282, 0x1c000100, 0xe2018bff, 0x2c002203, 0x32250000, 0x022e3435, 0x36342627,
//	0x08bb8237, 0x07171668, 0x14062226, 0x1e171617, 0x15161702, 0x15070614, 0x012e3523, 0x37023e27, 0x58120116, 0x1c248641, 0x61515634, 0x6d134a46,
//	0x20182976, 0x17451c63, 0x4f5e1a0d, 0x305c2d60, 0x05080c09, 0x29605c73, 0x17143e36, 0x0f669f2b, 0x14075c5f, 0x54221562, 0x0c2c1b16, 0x24131a29,
//	0x0f71533a, 0x1d056a6d, 0x17211b19, 0x8783340d, 0x2d00053c, 0xff02f3ff, 0x0500dd02, 0x15000d00, 0x1d001900, 0x1b170000, 0x010b3301, 0x90822202,
//	0x14163223, 0x23078700, 0x00223432, 0xaa2f0382, 0xbe669dcc, 0x5d8403aa, 0x015c865c, 0x825c8638, 0xfd280806, 0x0187878a, 0x09868694, 0x54019201,
//	0x9cfe7efe, 0xa24f9801, 0xfea24d4d, 0x4da34e15, 0xa701a34d, 0x8cd8fd8c, 0x17000300, 0x88286b82, 0x1b00c802, 0x2d002400, 0x59836782, 0x35263725,
//	0x82323634, 0x160726e7, 0x17373617, 0x29068206, 0x06272607, 0x32161426, 0x08823736, 0x013e5608, 0x22232634, 0xfd171415, 0x36527e68, 0x62be6a56,
//	0x20344a69, 0x3922631a, 0x0c722b33, 0x3feb6828, 0x45215a60, 0x30613660, 0x4e502a28, 0x63977d0d, 0x4c603916, 0x66466563, 0x383f323c, 0x58591d44,
//	0x2804744d, 0x60fa6d45, 0x5a2c383d, 0x3a88133a, 0x49502c4b, 0x28fc8228, 0x01350001, 0x029b00d2, 0x08fb82d3, 0x15130022, 0x012f2307, 0x0e46119b,
//	0x22d30201, 0x0030d1df, 0x3d000100, 0x380184ff, 0x09001c03, 0x10130000, 0x10399b82, 0x012e0717, 0x8532c93d, 0x70593285, 0x5a015001, 0xfd574472,
//	0x324459a0, 0x824e82df, 0x8217202f, 0x8212202f, 0x8207202f, 0x103636db, 0x10163727, 0x85851707, 0x38c8c833, 0x57600259, 0x4efd7344, 0x2a288273,
//	0x011c0001, 0x02870169, 0x821800cb, 0x33700857, 0x013f0715, 0x1f010f17, 0x012f0701, 0x3f27010f, 0x37012f01, 0x9e27011f, 0x14611267, 0x5970141f,
//	0x3f0b4f0e, 0x0d4c0c40, 0x1f136f58, 0x02126114, 0x306914cb, 0x10066307, 0x10430e51, 0x43106867, 0x0610510f, 0x69300763, 0x2c000100, 0x49021300,
//	0x0b003402, 0x35250000, 0x35333523, 0x15331533, 0x08011523, 0xdc65dcdc, 0x63e013dc, 0xe063dede, 0x38272782, 0xcb0056ff, 0x83006a00, 0x2f2382a7,
//	0x36270714, 0x3f547358, 0x367e1420, 0x2924429c, 0x2628a384, 0x19011601, 0x03007801, 0x2382a382, 0x01f32629, 0x00626216, 0x82440001, 0x00ce221d,
//	0x83178370, 0x8a44235f, 0x11827070, 0xff015808, 0x019efffc, 0x00bb02bf, 0x07000005, 0x0b33011b, 0x99b80401, 0x629eb372, 0x7601a701, 0x81fe62fe,
//	0x00020000, 0x02f3ff34, 0x00c8021f, 0x001c0011, 0x26220400, 0x34352627, 0x32013e37, 0x15161716, 0x24060714, 0x10363216, 0x0722012e, 0x62011506,
//	0x48235370, 0x82532348, 0x47300806, 0xf7fe2347, 0x203b853c, 0x381a5733, 0x4f27200d, 0x2650d4d5, 0x4f262020, 0x274ed6d5, 0x016e70b5, 0x13257602,
//	0x0100c62a, 0x00002300, 0xc202fd01, 0x2008ff83, 0x13173533, 0x37270723, 0x15371117, 0x0506aa49, 0x74d14c85, 0x01026495, 0xbb4c8ae3, 0x02a8fd08,
//	0x212a8264, 0x04822b00, 0x8f82fd20, 0x00001931, 0x033e3533, 0x22233435, 0x3e270706, 0x82323301, 0x062e088f, 0x2515010f, 0xa4433315, 0x2c4b332b,
//	0x25303175, 0x775d4585, 0x01963943, 0xc3475721, 0x41256138, 0x1f571f2a, 0x3a51613b, 0x06b64779, 0x4a826606, 0xff080025, 0x82d901f3, 0x00212c4f,
//	0x36322500, 0x012b2634, 0x82373635, 0x07222507, 0x32333627, 0x1520e282, 0x3c085783, 0x2f262223, 0x01163701, 0x39283402, 0x20876e41, 0x687c2d2f,
//	0xe85e500e, 0x766f755f, 0x1e1f7639, 0x31597a27, 0x0b5f397e, 0x2378110c, 0xb6145e0d, 0x2005296f, 0x20775e8d, 0x30561010, 0x35008200, 0x00150001,
//	0x02070200, 0x000f00c7, 0x13353700, 0x37150317, 0xe7823313, 0x17232508, 0xa5153723, 0x1ac39970, 0x01414158, 0x50980275, 0xfe0fdf01, 0x01050543,
//	0x02fffe03, 0x00989867, 0x14000100, 0xe423a382, 0x8200bb02, 0x29a384f3, 0x21130723, 0x1e072715, 0x9b8b1701, 0x350d2c08, 0x608e3829, 0xe8490137,
//	0x295f4419, 0x3b6a7a54, 0x261e1d76, 0x8636597a, 0x75010233, 0x04b10463, 0x7b2d1714, 0x1326776a, 0x823c5613, 0x05db4193, 0xfb820a20, 0x20001522,
//	0x26236682, 0x82070622, 0x141623f2, 0xe3412206, 0x33460805, 0x01011f32, 0x32161714, 0x23263436, 0xd0010722, 0x083b8756, 0x837c2833, 0x537be17a,
//	0x5a335e28, 0xc3fe143c, 0x2f7a1c25, 0x42314730, 0x48154c02, 0xe0630570, 0xddb9a078, 0x16222855, 0x7054fe08, 0x8b3a1722, 0x6a820a31, 0x1b24c382,
//	0xe801f8ff, 0x073dc382, 0x21130000, 0x01270115, 0x011b0535, 0x7bdcfecd, 0xaefe2401, 0xfd48bb02, 0x54020a85, 0x271d8206, 0x27000300, 0x0b02f3ff,
//	0x12249782, 0x23001b00, 0x6c442f82, 0x85152007, 0x364e089a, 0x14172637, 0x26343532, 0x13010e27, 0x14152234, 0x40361716, 0x6270d270, 0x7fdf867b,
//	0x61552d41, 0x2f5441f1, 0x36cbdd2d, 0x13025540, 0x50666451, 0x6b423d6c, 0x547d7653, 0x3e175d39, 0x325f6aef, 0x37121c3a, 0x535d1901, 0x211a3b2c,
//	0x07410000, 0x82082005, 0x0015326f, 0x2500001f, 0x37363732, 0x26222306, 0x16323634, 0x08088310, 0x37012f44, 0x22261316, 0x33161406, 0x01343732,
//	0x2b152f1c, 0x6a364203, 0x7cdf7978, 0x682f7f74, 0x64241c1c, 0x2b761994, 0x46364327, 0x86291556, 0x79d8690c, 0xbc89fea2, 0x5710101f, 0x0f000233,
//	0x1435803d, 0x678300b6, 0x05826420, 0x2902ee22, 0x2405f746, 0x15333513, 0x32038203, 0x8a8a8a64, 0x7070b901, 0x707047fe, 0x4f000200, 0x830056ff,
//	0x00072523, 0x1700000b, 0x2006e943, 0x26078203, 0x3f54736f, 0x438a0b20, 0x022106ef, 0x05c34316, 0x00430030, 0x0260020b, 0x00070041, 0x25353700,
//	0x01820515, 0x1d02432f, 0x8c0174fe, 0x70f056fb, 0x6fa906a8, 0x28008200, 0x002c0002, 0x0150028f, 0x337b87b8, 0x35051521, 0x022c1521, 0x02dcfd24,
//	0x64540124, 0x6363c564, 0x01222782, 0x4f823900, 0x4f885520, 0x35253533, 0x01391505, 0x0275fe8b, 0xa96f0b1c, 0xf070a806, 0x084f8556, 0x00001726,
//	0xc802ca01, 0x21001d00, 0x27130000, 0x3233023e, 0x07141516, 0x2307040e, 0x3e343534, 0x35363701, 0x06222334, 0x3608e583, 0x280c273e, 0x7a603372,
//	0x3d1f172b, 0x67011c1d, 0x481e3b26, 0x055d2559, 0x5a2f0289, 0x6b231507, 0x192f4c53, 0x331a2b1a, 0x34050520, 0x32153051, 0xfd185045, 0x856d6db9,
//	0xff3a3667, 0x020003d0, 0x002e00be, 0x05000037, 0x022e2206, 0x36373634, 0x06f84220, 0x41232721, 0x332505a9, 0x14061732, 0x8283821e, 0x22262875,
//	0x33161006, 0x82033732, 0x15620808, 0x36323314, 0x7d2d0302, 0x413d667c, 0x18016f35, 0x29497bc9, 0x38040424, 0x51492e43, 0x02663b54, 0x05050401,
//	0xf989481f, 0x1c739e9f, 0x5c18193e, 0x47232117, 0x5a2f0f21, 0x2c95b791, 0x7091aa5c, 0x6a34369f, 0x1b61ec65, 0x1829778b, 0x6d506c05, 0xe9fe9580,
//	0x9e010ba1, 0x82512f08, 0x020000ab, 0x0482fdff, 0x02182a08, 0x000700bb, 0x2300000b, 0x23133313, 0x13072327, 0x03230333, 0x79c68ec7, 0x432dd02c,
//	0x02064fa4, 0xac45fdbb, 0x010e01ac, 0x3ad48246, 0xff610003, 0x023102f3, 0x001400c8, 0x0024001c, 0x15320100, 0x07010e14, 0x82150706, 0x820720d5,
//	0x132724d0, 0x43033603, 0x27210576, 0x08078535, 0x48010745, 0x0c1019d7, 0x47751a14, 0x9f4f5c3f, 0x10850505, 0x3a287048, 0x62487036, 0x6f352d27,
//	0x30c0c802, 0x0e09162f, 0x7c1f040c, 0x112b3380, 0x75014201, 0x0990fd0d, 0x012e883a, 0x77300159, 0x0000062f, 0x82400001, 0x822a2077, 0x00192377,
//	0xe3430500, 0x323f0806, 0x22260717, 0x14150607, 0x3632011e, 0x020e1737, 0x8a7a4401, 0x994e2470, 0x9f5e0d52, 0x2f223116, 0x243a645b, 0x0d78270b,
//	0x4bfdb9aa, 0x62141218, 0xc333170e, 0x1c29795b, 0x1607591b, 0x84020024, 0x824e20cb, 0x0b4c0853, 0x00001600, 0x1e323613, 0x15161701, 0x27222110,
//	0x36373237, 0x23262710, 0x61161307, 0x3a608e96, 0xebfe1e11, 0x4bd6ab2d, 0x1730331a, 0x36017241, 0x270dbb02, 0x7e4f2f3f, 0x580d8dfe, 0x8b012f18,
//	0xfe061326, 0x00000803, 0x61000100, 0x26080482, 0x00bb02db, 0x3300000b, 0x25152111, 0x23153307, 0x61152517, 0xfbfe7a01, 0x05f1f105, 0xbb020501,
//	0x63c40366, 0x8c6602cd, 0x8a09202f, 0x8313202f, 0x04fa232d, 0x2b82eaea, 0xc3036925, 0x82d0fe62, 0x0603412a, 0xaf822620, 0x00001d2a, 0x06113301,
//	0x012e2223, 0x0807d246, 0x26071741, 0x06072223, 0x32161710, 0x01273537, 0x7958d94d, 0x19494d30, 0x63295236, 0x890e5da9, 0x2f175d2e, 0x1f8f1a31,
//	0xfe790168, 0x30112aa4, 0xd9ab5928, 0x151d264c, 0x2f180e61, 0x1c348dfe, 0x8506bd0b, 0x4f0221bb, 0x2108bb87, 0x03210333, 0x13231133, 0x75611321,
//	0x030a0103, 0xfe037575, 0xbb0202f7, 0x2501dbfe, 0x310145fd, 0x9482cffe, 0xff23ef82, 0x47d700ff, 0x172e0587, 0x03330313, 0x04046113, 0x01040476,
//	0xf1824201, 0x7afeca22, 0xff25aa82, 0x00f3fff3, 0x232382f9, 0x3500000c, 0x363b9f82, 0x11331135, 0x27222314, 0x190a3f23, 0x2f21b674, 0x1309085f,
//	0xfed20176, 0x8209fe36, 0x00022653, 0x02000061, 0x2c2f8277, 0x000b0006, 0x13012100, 0x09150133, 0x3a8a8201, 0xfee40103, 0xfe8cf7f5, 0xfe2101fa,
//	0x05057660, 0x53016801, 0xfe06b2fe, 0x82bb0299, 0x01632291, 0x21c38558, 0x8f85d001, 0x3311332a, 0x61152503, 0xff000575, 0xab222082, 0x8b826802,
//	0x825d0021, 0x24af835b, 0x3300000f, 0x21018513, 0x01840323, 0x175d1330, 0x8306859e, 0x0274189f, 0x867c8305, 0xeb820106, 0xa801582c, 0x480245fd,
//	0x9c0164fe, 0xaf41b8fd, 0x5b022107, 0x24082341, 0x33033313, 0x2a3d8211, 0xfb996113, 0x996f0e05, 0x820d05fa, 0x02cc226a, 0x33358234, 0x00cdfd33,
//	0xff400002, 0x026802f3, 0x001200c8, 0x05000023, 0x480ab141, 0x4c080684, 0x37321626, 0x2e343536, 0x020e2202, 0x01011e14, 0x484e3054, 0x28523618,
//	0x285d7a5d, 0xb1407252, 0x421e5c2d, 0x58352910, 0x0c102934, 0x31130d16, 0xd5a95728, 0x2020264e, 0xf3d54e26, 0x0b732b4e, 0x54cb2511, 0x12123866,
//	0x5c976638, 0x206f8239, 0x20df8261, 0x256f8228, 0x0015000c, 0xe94a1300, 0x06340805, 0x23152723, 0x32163713, 0x26273436, 0x8d610722, 0x3e486ad0,
//	0x04756f5d, 0x207e3a71, 0x3278121c, 0x7a0eba02, 0x32389076, 0x4501e305, 0xcd390a06, 0x00080f15, 0x9f22bb84, 0xbb889302, 0x2e220627, 0x023e3402,
//	0x25b88232, 0x17150710, 0xb98e2407, 0x6928a631, 0x2a2a4f5c, 0x5c7a5e50, 0x8a5f5228, 0x8598fe26, 0x583422bb, 0x27bb8335, 0x4e200904, 0x4c93d494,
//	0xfe26ba83, 0x2a065a59, 0xbc8ec764, 0x2008fb41, 0x34738256, 0x0017000e, 0x15320100, 0x13150714, 0x11270323, 0x36031323, 0x08c18713, 0xf154012d,
//	0x8889a392, 0x0305766e, 0x774f0370, 0x8315182f, 0xe1c80244, 0xfe0529a6, 0x040801ed, 0x4801f4fe, 0xfe0e7201, 0x993b09a8, 0x8209161b, 0x00012657,
//	0x01f3ff25, 0x215782eb, 0xff4c002d, 0x27053005, 0x36343526, 0x011f3233, 0x06222607, 0x48061e14, 0x2608098f, 0x1637023e, 0x42581b01, 0x112c1175,
//	0x7511061f, 0x1b4d4f6c, 0x2c736d13, 0x172d4937, 0x071e1628, 0x34667e13, 0x4c1f1e71, 0x383f07fd, 0x10180935, 0x292b101f, 0x07166d55, 0x51251562,
//	0x0b14232d, 0x101f1317, 0x78612d27, 0x4c100f1e, 0x012207fc, 0xd182fcff, 0xbb02f13f, 0x00000700, 0x27152103, 0x07132313, 0xc3f50104, 0xc3037402,
//	0x0367bb02, 0x5702a9fd, 0x25228203, 0xf3ff6100, 0x27824b02, 0x0000142c, 0x11331113, 0x3e011e14, 0x08833502, 0x0e072908, 0x26222301, 0x32177561,
//	0x7517316f, 0x3e562140, 0x3101797c, 0x91fe8a01, 0x0120656d, 0x016e641f, 0xbe7ffe6f, 0x8c1e2546, 0x1024f384, 0x22020000, 0x33236f85, 0x82133303,
//	0xcf033001, 0x068a7bbf, 0x02c17c8b, 0x02acfdbb, 0x8445fd54, 0x821c2027, 0x82e82027, 0x000f2227, 0x84278600, 0x0323332b, 0x65810323, 0x62064075,
//	0x3f066292, 0x65976776, 0x37826406, 0xa101b72c, 0x49025ffe, 0xac0145fd, 0x3f8454fe, 0x3f820520, 0x3f823720, 0x3f820d20, 0x68861320, 0x3d831320,
//	0xc7ce053d, 0x8a068985, 0x86cfc785, 0x0192058f, 0xfe5d015e, 0xfe1301ed, 0x01a4fea1, 0x84f1fe0f, 0x21f0823b, 0x3b821902, 0x3b8b0920, 0xd203d234,
//	0x8a05897f, 0x0102d27f, 0xfebb0100, 0xfe5b01a5, 0x2e82ff45, 0x00010023, 0x206b821d, 0x067f4308, 0x01352108, 0x21350535, 0x25150115, 0x5f011d15,
//	0xd201b6fe, 0x5e01a6fe, 0x07f20162, 0xfe626707, 0x6605050d, 0x20083385, 0x0184ff62, 0x00130328, 0x17000007, 0x27153311, 0x62153711, 0x7c5b5bc6,
//	0x035a8f03, 0x59021ffd, 0x24578200, 0x019eff0f, 0x053744d1, 0x010b0535, 0x01011b33, 0x72b39e60, 0x0162b898, 0xfe9e017f, 0x8259fe8a, 0xff212423,
//	0x86e70084, 0x17353347, 0x33350711, 0x5d5d2111, 0x02597cc6, 0x5a03e102, 0x478371fc, 0x3a013226, 0xbc02d501, 0x1b3a6b83, 0x07133301, 0x32032303,
//	0x6a957896, 0x01640664, 0xfe770145, 0x24010b89, 0x9785dcfe, 0x5dff0d28, 0xafff1f02, 0x97820300, 0x0d25c782, 0x52a31202, 0x26678252, 0x018c02a2,
//	0x832d03c8, 0x37133b17, 0x20a20705, 0x02160601, 0x445d5cd1, 0x2e000200, 0xf501f3ff, 0x19005602, 0xd14e2300, 0x33580806, 0x22263417, 0x3e270706,
//	0x15323302, 0x23272311, 0x2613020e, 0x14060722, 0x37363216, 0x7d5d4dd8, 0x5a1f6076, 0x0e1f3e6f, 0xc735802f, 0x0b05104a, 0x29806525, 0x1d16118c,
//	0x0d2f4f41, 0x0158c161, 0x17162961, 0x1f130655, 0x3f82fed8, 0x012a1909, 0x1411061b, 0x16172971, 0x022aa482, 0xf3ff5200, 0xf5021902, 0x71820b00,
//	0x3313002d, 0x32333615, 0x22231011, 0x43372726, 0x300805fe, 0x23022e27, 0x74520722, 0xd9c63954, 0x74328e2e, 0x2910683a, 0x161c050c, 0x0246371b,
//	0xfe13b2f5, 0x18c6fed7, 0x0f0e4511, 0x2e60ba22, 0x14031114, 0x20df8200, 0x24c3883e, 0x17162500, 0x2340820e, 0x37343526, 0xd0475982, 0x17102105,
//	0x2f08b982, 0x170bd301, 0x34641f09, 0x48508473, 0x0d4c4e76, 0x2a18746d, 0x56431539, 0x06332281, 0x9d962013, 0x133d45ae, 0x2d180e5b, 0x0f2adafe,
//	0x00020018, 0x02215382, 0x23a7820a, 0x001e0012, 0x83062148, 0x33352150, 0x820a1141, 0x33390858, 0x00013f32, 0x626a57ff, 0x4a314833, 0x060d4c74,
//	0x7547261d, 0x2111713d, 0x3a1f0d26, 0x950d153f, 0x2448ce94, 0x0bfdb213, 0x1a18163b, 0x1519e901, 0x20cdfe2a, 0x000b210c, 0x26638600, 0x00560214,
//	0x83210011, 0x33102963, 0x011d1632, 0x16171421, 0x48085583, 0x34030617, 0x2627052e, 0x07020e22, 0xfa380137, 0xfe6f6ff8, 0x2a1926a3, 0x1c1f5a51,
//	0x02020662, 0x0e0b0705, 0x334f0e09, 0xe601081b, 0x8063020d, 0x236f4894, 0x580b1e16, 0x06810130, 0x071f0929, 0x07050514, 0x30362e12, 0x356a8205,
//	0x2a000100, 0x76010000, 0x12000203, 0x11330000, 0x3e373523, 0x1d413301, 0x15210805, 0x11231533, 0x0643436d, 0x08485863, 0x1b0c3432, 0xd2018181,
//	0x63780e47, 0x07035e03, 0xfe5a6410, 0x26408231, 0xff270002, 0x8208024d, 0x00212dab, 0x1700002d, 0x34353216, 0x3735012e, 0x2b05f344, 0x16071517,
//	0x07061415, 0x011e1406, 0x59080782, 0x012f2223, 0x16140612, 0x34353632, 0x27262726, 0x35a3ae42, 0x8b9029d0, 0x40a83e70, 0x046c7b1e, 0x6a8141b9,
//	0x941c5861, 0x327f3539, 0x4f06030e, 0x10191a3b, 0x73025720, 0x6571912f, 0x420a460c, 0x016e583b, 0x394c0a27, 0x1647402c, 0x32900207, 0x402f3086,
//	0x04022f40, 0xc7820004, 0x00004d28, 0xf5020f02, 0xc7831100, 0x15332a08, 0x15163236, 0x34112311, 0x06222326, 0x744d1107, 0x74439c6f, 0x4a1a2a1c,
//	0xd1f50230, 0xfe6a6b33, 0x5566017e, 0xfe141334, 0x21368238, 0xc9825800, 0x3b82de20, 0x07000322, 0x11383d84, 0x15333503, 0x867d7461, 0xb7fd4902,
//	0x5e5e9702, 0xe7ff0200, 0xf0004eff, 0x0b252382, 0x00000f00, 0x27c38307, 0x14113311, 0x13272306, 0x0c362b82, 0x74144427, 0x83524e60, 0x2f064a86,
//	0xfd0d025d, 0x07707ff4, 0x38824203, 0x02225982, 0x64825200, 0x024c2808, 0x000400f1, 0x1300000b, 0x03132311, 0x33130301, 0xc6011503, 0x01050574,
//	0x94dfef64, 0x020701f5, 0x010ffdf1, 0x82b00141, 0x013a2705, 0x05f9fe0c, 0xd783c6fe, 0x00213b82, 0x207782c6, 0x25998503, 0xf5027452, 0xef820bfd,
//	0x00005d28, 0x57025d03, 0x17842200, 0x36331724, 0x5f4c1732, 0x82f58405, 0x08ff85f4, 0x2326273c, 0x5d110722, 0x79050d4c, 0x2c2720ac, 0x42512552,
//	0x574f1774, 0x1a740419, 0x553e190c, 0x483a4902, 0x1b19184c, 0x80fe686f, 0x37536401, 0x16281022, 0x660182fe, 0x2f08116f, 0xc74841fe, 0x021c2207,
//	0x06574156, 0x58856783, 0x62822620, 0x7b275784, 0x17743da9, 0x8219594e, 0x6e472d4a, 0x017efe66, 0x202f5965, 0x0043fe10, 0x20052b43, 0x303b8218,
//	0x000f0007, 0x20062400, 0x20361026, 0x36320016, 0x083c8210, 0x18021022, 0x6dfffe6c, 0x6c01016d, 0x308acffe, 0x8e318a30, 0x2c019b9b, 0x95fe9c9c,
//	0x52050153, 0x00fbfe52, 0x02260082, 0x5aff5200, 0x43821f02, 0x20001337, 0x11170000, 0x3e331733, 0x33363703, 0x10151632, 0x15272223, 0x081c4811,
//	0x07063708, 0x050e4c52, 0x25111f02, 0x57232a0f, 0x4a2be464, 0x2a136044, 0x37151707, 0x02a62c4b, 0x16013cef, 0x0e05140b, 0xc4fe9691, 0x0c01a50c,
//	0xb6210e12, 0x06224c43, 0xa7841718, 0x06025a22, 0x0d2a6382, 0x00001900, 0x22063505, 0xaa822726, 0x17226382, 0xf94b0311, 0x17310805, 0x37323316,
//	0x6d419201, 0x71421f45, 0x44712e74, 0x12753874, 0x2112231d, 0xb5a6483e, 0x46211d1c, 0x12865901, 0x0228fd12, 0x22120e8d, 0x0f1dac93, 0x063b4118,
//	0x82900121, 0x08fd8257, 0x1732002b, 0x22232607, 0x11231107, 0x33171633, 0x3a3e0136, 0x14190918, 0x49743e4b, 0x24060609, 0x68085602, 0x44fe2c02,
//	0x0e2f4902, 0x26f7821d, 0xff2f0001, 0x82ce01f3, 0x0026273b, 0x36322500, 0x47482e34, 0x24458305, 0x1e140622, 0x07454805, 0x37274608, 0x270e0116,
//	0x08463428, 0x0c352226, 0x5dc16521, 0x1d7d6812, 0x2e166939, 0x10071e13, 0x6b306069, 0x53751c3b, 0x15235024, 0x1c0c0c03, 0x4f3c2810, 0x195c205d,
//	0x1f253c21, 0x190e1107, 0x582c240f, 0x5e1a1a69, 0x08728232, 0x00010040, 0x01f5ff25, 0x00b10252, 0x37000014, 0x3f352311, 0x33153301, 0x14112315,
//	0x15373316, 0x26222306, 0x17484368, 0x11767559, 0x2d224024, 0x01be4b4f, 0x8a0e4813, 0xeafe5a88, 0x5d031f43, 0x43855308, 0xf3ff5028, 0x49020e02,
//	0x43831700, 0x14113328, 0x32331617, 0x1d451137, 0x07032105, 0x27084582, 0x0e0d7450, 0x745a3c25, 0x01050e4c, 0x0f2c112b, 0xc79b222a, 0x95fe8201,
//	0x30111360, 0xb7fdbf01, 0x0818013a, 0x000d0415, 0x06248f82, 0xe8010000, 0x07204b82, 0x30082f48, 0x78aab003, 0x78770675, 0xfe4902ad, 0xfde80118,
//	0x217482b7, 0x2c820001, 0x82de0221, 0x12574827, 0x7475822f, 0x9756054e, 0x754c0656, 0x06559c75, 0x2c378255, 0xfeac0105, 0xfdfb0154, 0xfeae01b7,
//	0x203f8452, 0x20678209, 0x483f82ff, 0x23080657, 0x33373317, 0x27231303, 0xb6090723, 0x067380b0, 0xb6b08071, 0x73067584, 0x17013201, 0xe8fed7d7,
//	0xececcffe, 0xff253783, 0x015afffb, 0x823782f1, 0x3717213f, 0x35068f48, 0xcc527507, 0x7a057c81, 0xa637cd7a, 0xfe1302dc, 0xfd9c0164, 0x2e82c8d9,
//	0x00010027, 0x0100001a, 0x202f82cc, 0x20cf820b, 0x09534835, 0x25011a36, 0x9f01e8fe, 0x2a01dcfe, 0x06950154, 0xfe546107, 0x6007066a, 0x24083385,
//	0x0185ff30, 0x001203a0, 0x37000023, 0x27263435, 0x3d013e35, 0x33363401, 0x22260717, 0x14011d06, 0x15070607, 0x08078216, 0x3733163c, 0x22230617,
//	0x4c4e2dab, 0x4160542f, 0x17313505, 0x5a1c1b23, 0x054b1e14, 0x46b4162b, 0x0c243b78, 0x3a260b57, 0x03675f61, 0x482b0355, 0x1b234d60, 0x75210608,
//	0x0331456a, 0x9b820257, 0xa9ff5f35, 0xfa02bd00, 0x00000300, 0x11331117, 0x03575e5f, 0x85affc51, 0x821a2083, 0x858a2083, 0x16172383, 0x7f823632,
//	0x26353724, 0x07822627, 0x07232626, 0x32333627, 0x17238084, 0x82010e15, 0x27232c88, 0x1447221f, 0x28161c5a, 0x82471f17, 0x5460367b, 0x2d4e4c2f,
//	0x032241b4, 0x756a4531, 0x15080621, 0x48604d29, 0x2d85822b, 0x3a615f67, 0x0c570b26, 0xc1783b24, 0x83820002, 0xcc001335, 0x7401fe01, 0x00000d00,
//	0x32163213, 0x010e1737, 0x82222622, 0x278e3961, 0x23313db8, 0xbf453f11, 0x42253141, 0x1c447401, 0x442a193d, 0x00483e22, 0x02280082, 0x8fff4a00,
//	0x4902d400, 0x0720bb82, 0x1335bd82, 0x35031333, 0x0f501533, 0x8a840f60, 0xfef60171, 0x6e4c020a, 0x2e5f836e, 0x018bff3e, 0x00b602f5, 0x05000018,
//	0x58102635, 0x23230795, 0x83100622, 0x372f08d7, 0x15070617, 0xc9c90701, 0x0d433c60, 0x3550316d, 0x56431539, 0x55392236, 0x021c6c75, 0x6166221b,
//	0x0e5b1002, 0x2aecfe57, 0x5517180f, 0x826c0b2a, 0x0001367b, 0x02000040, 0x00c80216, 0x33000017, 0x23353335, 0x013e3335, 0x05ec4333, 0x07062708,
//	0x15231533, 0x5a401537, 0x7f065b5a, 0x0c48426c, 0x2c432564, 0xf9b8b703, 0x9f57ed64, 0x0e5e1481, 0xec577745, 0xc3846702, 0x58004326, 0x65025202,
//	0x5b084782, 0x3700001f, 0x27373426, 0x32361737, 0x07173717, 0x17071416, 0x22062707, 0x36270727, 0x34363216, 0x7e062226, 0x423a2726, 0x3e8f413c,
//	0x2a3b423d, 0x3b433b28, 0x3b439041, 0x8e4e7842, 0x4e864d45, 0x3e983bd6, 0x283c433b, 0x3a423b27, 0x3a3d9b3d, 0x2a283a42, 0x4976433c, 0x49499c46,
//	0x00326a82, 0x00110002, 0x02270200, 0x000b00bb, 0x13000013, 0xba421735, 0x15372406, 0x82213505, 0x232408b1, 0xa4843135, 0x88068a7f, 0xfe84a47f,
//	0xb1d6012a, 0x51150175, 0xfe570102, 0xfe5501ab, 0x8b5102a9, 0x8a8a5151, 0x00204282, 0x20093342, 0x23478207, 0x03113311, 0x5f2b0382, 0x015e5e5e,
//	0xfe670193, 0x8316fe99, 0x376f8205, 0x01a3ff32, 0x00c702f8, 0x0038002a, 0x37322500, 0x27343536, 0x3435032e, 0x3620e682, 0x29062a41, 0x15031e14,
//	0x15160714, 0x46560614, 0x376d0806, 0x012e3436, 0x06272627, 0x1e171415, 0x2c170101, 0x232e1410, 0x3f395356, 0x4bbc6a2a, 0x26505413, 0x5e5e4225,
//	0x77214142, 0x1c6c3358, 0xa5711f1c, 0x18422d22, 0x241e152c, 0x0c066e16, 0x15272b0e, 0x44201710, 0x272f4b34, 0x601a568a, 0x2a431919, 0x33441f19,
//	0x3b253745, 0x0e1b5e54, 0xe033600d, 0x141d3522, 0x1c090d08, 0x0a101f26, 0x05174121, 0xa5027f26, 0x0203cd01, 0x2a097b54, 0x15333533, 0x7b577c7f,
//	0x825da502, 0x2e248200, 0xff400003, 0x020603db, 0x000700a7, 0x4626000f, 0x16270ad5, 0x26103620, 0x56010622, 0x36240518, 0x17163233, 0x08063552,
//	0x3233164b, 0xc8060337, 0xcdc7c9fe, 0xfdc83101, 0x0101918b, 0x96fc9292, 0xa1349601, 0x51313961, 0x0a0e4716, 0x200f493b, 0x43381b21, 0x01cacaa5,
//	0xfecacc36, 0x019695e2, 0xfe979602, 0x6d6623cc, 0x0b292f85, 0x07094f06, 0x2f4c6f10, 0x29a78519, 0x0121012a, 0x00c3026c, 0xb8820018, 0x23060131,
//	0x37343522, 0x33363736, 0x22232634, 0x8227010f, 0x1115247c, 0x82012f23, 0x8314208e, 0x014f087c, 0x7438451b, 0x1b51232e, 0x4023182c, 0x59151339,
//	0x0e3f924a, 0x1d58190c, 0x3a271617, 0x872f5001, 0x04181f41, 0x161d3102, 0x96224b08, 0x8a26fdfe, 0x183b1802, 0x0002001c, 0x01520020, 0x005002ea,
//	0x000d0006, 0x13033700, 0x1f150717, 0x82372701, 0xb6173c06, 0x7b569696, 0x9595897b, 0x52797955, 0xff00ff00, 0xc906c933, 0x33fdfe32, 0x82c706c7,
//	0x00012aa4, 0x02760014, 0x00570131, 0x37398205, 0x23152135, 0x1d021435, 0xe164f366, 0x0001007d, 0x01030136, 0x00660128, 0x27068359, 0x0301f236,
//	0x04006363, 0x220c5b41, 0x4127001f, 0x0524115d, 0x37231527, 0x142ddf84, 0x17150706, 0x010f0323, 0x34363216, 0x135e4126, 0x5c350d32, 0x47540203,
//	0x50212b97, 0x01412f6a, 0x1616421e, 0x330e5e41, 0xbf8f01bc, 0x348408d5, 0x95030c40, 0x6b044e01, 0x183f1b03, 0x8924bb84, 0xc701a802, 0x20057349,
//	0x26bb8213, 0x023e0189, 0x824d4da8, 0x002d081a, 0x01120002, 0x0250018f, 0x000700cd, 0x1200000b, 0x36342622, 0x26141632, 0xf3223432, 0x865c5d84,
//	0x8686e25c, 0xa24f8f01, 0x0aa24d4d, 0x2830828c, 0x002c0002, 0x02170209, 0x20eb8241, 0x0509410f, 0xbf5a0120, 0x35233608, 0xfeeb012c, 0xc365c315,
//	0x630965c3, 0x623e0163, 0x9e629898, 0x0836829e, 0x00010044, 0x012a0130, 0x00c4024d, 0x13000014, 0x36373635, 0x07222334, 0x32013e27, 0x0f141516,
//	0x15371501, 0x4926403b, 0x22453320, 0x47605517, 0x01940e7c, 0x2e463f2a, 0x4a284155, 0x313b1f10, 0x04108947, 0x47855006, 0x22012824, 0x47823d01,
//	0x47822220, 0xbc591620, 0x013e2706, 0x23262734, 0x49410706, 0x55072005, 0x3b080554, 0x26222306, 0x47473e27, 0x34261f13, 0x0908264a, 0x08232b32,
//	0x26892d3e, 0x3f420b05, 0x26482147, 0x17198b01, 0x05461639, 0x0a073010, 0x0b4c0502, 0x0317346d, 0x4c120405, 0x0f10463a, 0xa726af82, 0xcd018c02,
//	0xe7822d03, 0x2713002e, 0x16bd1725, 0x02200601, 0x5c5d448c, 0x50301b82, 0x0e025aff, 0x15004902, 0x11170000, 0x17141133, 0x13488882, 0x08758206,
//	0x17072726, 0x100d7450, 0x74185849, 0x7d060e4b, 0x04182242, 0xef02a60a, 0x1369a0fe, 0x010f2113, 0x3ab7fdbf, 0xa2040d47, 0x29244782, 0x5f025cff,
//	0x2905df53, 0x012e1105, 0x21333610, 0x01822311, 0x6d070138, 0x01757971, 0xa4707448, 0x76035c01, 0xfc741601, 0xfdfa02a1, 0x33820006, 0x01582108,
//	0x01f2000c, 0x000800a5, 0x34261200, 0x15323336, 0x2e860614, 0x2d4d202d, 0x50260c01, 0x26274c23, 0x28052741, 0x014dffbf, 0x00170081, 0x82a3820c,
//	0x2734249e, 0x83141637, 0xbf2a089c, 0x0d15332d, 0x343e1446, 0x055e311f, 0x0b342f0c, 0x09395a37, 0x24000100, 0x59012a01, 0x0b00c302, 0x35130000,
//	0x07233533, 0xdb823727, 0x64431533, 0x8c2e5104, 0x2a015752, 0x4040e950, 0xbdfe0660, 0x265f8350, 0x01100002, 0x82640121, 0x0007222f, 0x2010820f,
//	0x05384206, 0x69830620, 0x06222627, 0xba4d6401, 0x3b02824d, 0x215520f5, 0x01205521, 0xce6a6a8b, 0x32b46a6a, 0x32329b32, 0x1f000200, 0xe9015200,
//	0x22078743, 0x8235013f, 0x2507226a, 0x3a068437, 0x567b7bfd, 0xccfe9696, 0x95567a7a, 0x06c98595, 0xffff33c9, 0xc706c735, 0x82fefd33, 0x00290866,
//	0xff240003, 0x028303f7, 0x000500dd, 0x00220016, 0x011b0500, 0x37010b33, 0x13373435, 0x013f0717, 0x15371533, 0x37231523, 0x34c28a25, 0x9dce0401,
//	0xdaabbe69, 0x5e516302, 0x284a0c64, 0xfd015828, 0x5fd6863f, 0x582f0809, 0x01060939, 0x03fe090b, 0x50019393, 0x8adb4f4f, 0x207385ed, 0x22738489,
//	0x87260011, 0x8b012073, 0x13d14262, 0xcd050128, 0xaabf6a9d, 0x6b86d3fe, 0x421e0121, 0x7b880de2, 0x88330121, 0xd6fe216d, 0x2211f642, 0x82270003,
//	0x845320f3, 0x0028237f, 0xf75f0039, 0x05294406, 0x35012b22, 0x2217fd42, 0x4105012f, 0xd9280f16, 0xbe699dce, 0x46fafeab, 0x3e061543, 0x2c320a07,
//	0x2d3e0822, 0x0a062689, 0x3e473f42, 0xf201133e, 0x5e526202, 0x284a0d63, 0x89025928, 0x439420a1, 0x362b0e2b, 0x04040317, 0x463a4b12, 0x41f20718,
//	0x002f0d39, 0x16000200, 0xca0182ff, 0x1e004902, 0x50002200, 0x3b080ba9, 0x3337033e, 0x0e141514, 0x15060701, 0x32161714, 0x33350336, 0x0da30115,
//	0x73280c1a, 0x3b7b6032, 0x1b1e471c, 0x3b266702, 0x1220481e, 0x8a8d5d4c, 0x07411a1b, 0x536a2215, 0x321b3854, 0x2e092a5a, 0x0c153044, 0x6dda0118,
//	0x0000006d, 0x82fdff03, 0x03182870, 0x00070076, 0x590f000b, 0x27230d8d, 0x59070537, 0x88240b91, 0x1202011a, 0x23099659, 0x424d58ca, 0x43884282,
//	0x43937720, 0x25012f23, 0x24438b17, 0x0001136b, 0x2343891c, 0x594f4292, 0x7420438b, 0x14204384, 0x2f28878d, 0x17333701, 0x06232707, 0x8a28488b,
//	0x8e3d8d1e, 0x08078b1e, 0x8e264c89, 0x30626230, 0x4f8b043c, 0x4f846620, 0x4f8d1b20, 0x1632032f, 0x17373233, 0x26222306, 0x27070622, 0x2e568b34,
//	0x07a21d63, 0x013f100d, 0x0ea31d51, 0x893e080f, 0x12012a5c, 0x70092a2d, 0x0816152f, 0x20608270, 0x06374104, 0x5f845920, 0x13000f22, 0x2724618d,
//	0x33153335, 0x598b0382, 0x5d78a123, 0x214e8978, 0x00825da8, 0x87000021, 0x84872047, 0x00132147, 0x2e2fa98e, 0x32363401, 0x26061416, 0x32161406,
//	0x8b263436, 0x36242b4f, 0x36355136, 0x2711113b, 0x57890f0f, 0x5e298323, 0x31028229, 0x0e280d79, 0x000d290d, 0x00f9ff02, 0x02eb0200, 0xa38400bb,
//	0x175a0120, 0x21400808, 0x23072335, 0x23111301, 0xfeeb0203, 0xf2f204fa, 0xfe060104, 0x7949b787, 0x12453401, 0x67bb0287, 0xcd63c303, 0xabab6602,
//	0x53febb02, 0xbefe4201, 0x00010000, 0x024dff40, 0x00c8022a, 0x17000023, 0x27268f83, 0x37341120, 0x0f5b013e, 0x4906200e, 0x272706b6, 0x14342cd8,
//	0x5bfbfe07, 0x3e2d0f19, 0x343e0a5d, 0x055e321d, 0x011c2e0c, 0x0f215b63, 0x28102a25, 0x5939301c, 0x0123088f, 0x427603db, 0xd55a0599, 0x3701240b,
//	0x5a610705, 0xfe2509d9, 0x03011aad, 0x24b48813, 0x4d581e03, 0x21f68242, 0xb4826100, 0x7703db22, 0x27223f92, 0x3f8b1725, 0x9542cb20, 0x24f48605,
//	0x4f42e602, 0x203f8959, 0x05174b74, 0x03277f8b, 0x33372707, 0x8a270717, 0x8bc32743, 0x8d3d8e1e, 0x858a8a1e, 0x62303c27, 0x003c3062, 0x20878603,
//	0x20878459, 0x0a6f5b13, 0x15251723, 0x06294201, 0xfe24498a, 0x785c799f, 0x02214688, 0x052942fc, 0xff278f82, 0x01fffffd, 0x8276030c, 0x00093e51,
//	0x17370300, 0x13070307, 0x03033303, 0x2213f51a, 0x76040476, 0x591d0304, 0x19fd424d, 0x05045b01, 0x33820020, 0x822d0021, 0x033c2233, 0x23338577,
//	0x17372713, 0x3f243385, 0x651cf312, 0x02263384, 0x5a4e43e6, 0x338ae3fc, 0x84fcff21, 0x00742733, 0x000d0007, 0xea851300, 0x84132321, 0x1d19286b,
//	0x1d813d82, 0x853e077f, 0x33e5273b, 0x39335c5c, 0x3d87e2fc, 0x03000322, 0x36223b82, 0x6f825903, 0xdf863d85, 0x03247585, 0x5f774577, 0xd6843985,
//	0x8904fd21, 0x02002d76, 0xf3ff2c00, 0xc8025b02, 0x1e000f00, 0x23237782, 0x5d113335, 0x13240a1b, 0x32331615, 0x08061e5d, 0x15331535, 0x9542426e,
//	0x113a608e, 0x2febfe1f, 0x2b3674a9, 0x3133194d, 0x72714315, 0x015b3701, 0x3f270d29, 0xfe7b522f, 0x37010d8d, 0x311707d8, 0x13268a01, 0x595bca07,
//	0x5b2d08e7, 0x0b006603, 0x00001b00, 0x13331133, 0x05495b33, 0x44011b21, 0x36200d15, 0x2209595b, 0x44a11d2a, 0x0d240713, 0x013f080f, 0x210b695b,
//	0x16446603, 0x20f5820b, 0x28c38240, 0x00760368, 0x00230012, 0x23795b27, 0x05370323, 0x1e7d5b07, 0x03011a23, 0x1f825b13, 0x589a0224, 0x7f88424d,
//	0x7fa97720, 0x25271323, 0x247f9d17, 0x00011310, 0x237fa01c, 0x594f4262, 0x74207f88, 0x2b207f84, 0x5f42ffa4, 0x27839d06, 0x3d8e1f13, 0x078b1e8e,
//	0x5e2086a0, 0x21057443, 0x8b880000, 0x8b846620, 0x8ba33320, 0x03421320, 0x23939d0e, 0x08a01e11, 0x21092b46, 0x9ba0013f, 0x2b42e220, 0x0004210c,
//	0x20052b42, 0x219f8459, 0x2d410027, 0x064f4325, 0x2d23999d, 0xa0785c79, 0x4478208d, 0x012e0658, 0x30002f00, 0x1e021c02, 0x00000b00, 0x01822737,
//	0x1737172f, 0x27071707, 0xafb04675, 0x46b2af45, 0x2b0582b1, 0xafb04730, 0x47b2b046, 0xaf46afb1, 0x08065b41, 0x6802d922, 0x1400d902, 0x26001d00,
//	0x3e130000, 0x37173201, 0x15160733, 0x23060714, 0x23072722, 0x13102637, 0x22058c55, 0x55130727, 0x44080635, 0x5d289237, 0x6010327d, 0x40725927,
//	0x142f4162, 0xcf5a2b61, 0x421e611e, 0x1a246116, 0x17411e67, 0x2682024f, 0x52251420, 0x4ef3d454, 0x582c122b, 0xfeac0157, 0x25110930, 0xcc3880cb,
//	0x120b0d01, 0x397ecd25, 0x217e82a2, 0xab5c0200, 0x76032105, 0x18207f82, 0x2315ad5c, 0x07053713, 0x240db15c, 0x03011a58, 0x15b65c13, 0x589f0224,
//	0x5882424d, 0x77205787, 0x2722579a, 0x578d1725, 0x01128a24, 0x57961c00, 0x4f426723, 0x20578a59, 0x20578274, 0x43af961c, 0x5b8d0607, 0x8e1f6827,
//	0x8a1f8e3d, 0x205e9607, 0x06ed4263, 0x0f410320, 0x84582006, 0x426197b7, 0x618d063b, 0x5d784f23, 0x215d9678, 0x00825e7b, 0x0002002c, 0x02000003,
//	0x00770319, 0x695d0009, 0x2703230c, 0x315d1725, 0x12a12409, 0x5d1c0001, 0x46470b36, 0x203f8206, 0x263f825f, 0x00bb0230, 0x8218000f, 0x330323fb,
//	0xf8643615, 0x23062405, 0x60231527, 0x2808081e, 0x56750463, 0x4a6e6632, 0x75716041, 0x22833f74, 0x367d121f, 0x64015701, 0x76790658, 0x0531398f,
//	0x3a0aee86, 0x080f13cc, 0x20008200, 0x20ef8401, 0x058b483d, 0x34113327, 0x15163236, 0x08b74e14, 0x53842720, 0x2b264008, 0x013e3501, 0x22233435,
//	0x61111506, 0x3881b97e, 0x5c767e22, 0x180c2c24, 0x41382d57, 0x69334017, 0xda013136, 0x5a637777, 0x060c493f, 0x6d678b1f, 0x36045908, 0x05563b82,
//	0x43683731, 0x8220fe4b, 0x5c032067, 0x032305f7, 0x4519002d, 0x172405cf, 0x36342622, 0x231cf95c, 0x07053703, 0x241efd5c, 0x060120ee, 0x1c025d16,
//	0x5c4f0224, 0x7fb6445d, 0x17252722, 0xd8247f9e, 0x20060116, 0x0a237f9d, 0x8a5c5d44, 0x8424207f, 0x002b22ff, 0x42ffa200, 0x839e06c7, 0x9221eb27,
//	0x8b23933d, 0x27869d07, 0x6b6b3205, 0x00004532, 0x20078741, 0x20878412, 0x4587a433, 0x232409cb, 0x36270722, 0xc2218f9e, 0x08e4471e, 0x100e0724,
//	0x979d013f, 0x2a2b902c, 0x2b2d7309, 0x00007308, 0x23420400, 0x84022006, 0x0027219b, 0x49242541, 0x959e07f7, 0x7cfefe24, 0x8a9d7b57, 0xc6452320,
//	0x20878806, 0x21878435, 0x2541002b, 0x32342725, 0x22061415, 0x614c3626, 0x2a8f9e06, 0x5035bbc5, 0x12114936, 0x9d101127, 0x5a593d95, 0x2929305a,
//	0x102b0f55, 0x000f2b10, 0x39000300, 0x5d03f3ff, 0x28005602, 0x3a003200, 0x2e06bf41, 0x2634013b, 0x27070622, 0x3233013e, 0x5e363317, 0x556706d5,
//	0x23012706, 0x0e232722, 0xb5541301, 0x013f2206, 0x082a8213, 0x2734376e, 0x5b4de126, 0x1e5c7681, 0x1f3f6c5d, 0x71338a2c, 0xdc3c0432, 0x1fa5fe6e,
//	0x5f412311, 0x752a1d3e, 0x043b8430, 0x267d802f, 0x22222c8a, 0xf716443e, 0xe502304f, 0x610d1c15, 0x2c6852bc, 0x14561716, 0x7d404023, 0x1e784691,
//	0x15140911, 0x541d1358, 0x11012e26, 0x296c2006, 0x76010b21, 0x6e045846, 0x00001913, 0x3e000100, 0xf5014dff, 0xeb4caf82, 0x60222008, 0x3721112b,
//	0x08eb4c17, 0x332dc927, 0x86730715, 0x0c336050, 0x2d223627, 0x343e0b48, 0x05eb4c1e, 0x609f9421, 0x17250c3b, 0x2a102155, 0x05ea4c1b, 0x82030021,
//	0x02f32a6f, 0x002d0314, 0x00210011, 0x1fe55f25, 0x07053722, 0x251ee95f, 0x0120f6fe, 0xef5f1606, 0x7b01211c, 0x21076344, 0x7ba9ff3e, 0x25270323,
//	0x247b9e17, 0x060116f4, 0x207a9d20, 0x055e4436, 0x2420f788, 0x2920f784, 0x5a44f79f, 0x217f9e06, 0x5b44f8fe, 0x1bee6007, 0x44310121, 0x0420065b,
//	0x20067b41, 0x21838402, 0x85a00025, 0x9f064647, 0x7ce12385, 0x05417b57, 0x5d4f211d, 0x002e0082, 0x00f7ff02, 0x03130100, 0x0003002d, 0xd74d0007,
//	0x33113405, 0xfc200911, 0x02749c16, 0x445d5dd0, 0x490274fd, 0x8200b7fd, 0x00022200, 0x202b8216, 0x242b8732, 0x17372713, 0x2c2b8203, 0x20fc162c,
//	0x8c0274d1, 0xfd5d5d44, 0x212b8830, 0x2b82f3ff, 0x24034322, 0x0b205582, 0x8309c74d, 0x2114322f, 0x238a3d89, 0x74360782, 0x68338902, 0xfd433368,
//	0x22358534, 0x82010003, 0x58342033, 0xcb5406f3, 0x05c95005, 0x01256582, 0xd3784279, 0x05fb5874, 0x845bfd21, 0x00022630, 0x02f3ff41, 0x222f8219,
//	0x8222001a, 0x37273b39, 0x17371716, 0x14171607, 0x23010e07, 0x36341122, 0x37173233, 0x27072726, 0xaa5a1602, 0x01440805, 0x343c3e26, 0x3907672c,
//	0x0501055b, 0x6ceb7a6d, 0x053c4d76, 0x086f3c15, 0x308b3233, 0x02348732, 0x1c402e94, 0x1e513723, 0x1226da6a, 0x1701918b, 0x03298a75, 0x4f363c40,
//	0x4b4b22fe, 0x004343cf, 0x5d000200, 0x1c2b0482, 0x11001203, 0x00002100, 0x60331133, 0xdf510e85, 0x2223280a, 0x5d362707, 0x60050d4c, 0xdf510895,
//	0x0e072409, 0x60013f10, 0x03210fa5, 0x08d94512, 0x24059343, 0x002d0318, 0x053d5107, 0x230fb160, 0x07053703, 0x2410b560, 0x0601201e, 0x0fba6016,
//	0x432f0221, 0xef42056a, 0x22539b06, 0x90172527, 0x16082453, 0x8f200601, 0xea012153, 0x220c4343, 0x84240318, 0x611720a7, 0x03201159, 0x90063643,
//	0x431b2057, 0x5a900627, 0x1a43e520, 0x20af8806, 0x205b8412, 0x4d5b911f, 0x23240a31, 0x36270722, 0x0e206390, 0x2409244d, 0x3f100e07, 0x216b8f01,
//	0x70417002, 0x00002b08, 0x3e000400, 0x1802f3ff, 0x6f840203, 0x93001321, 0x067e43cd, 0x32236990, 0x907b577c, 0x5d03215d, 0x00200082, 0x2c26c782,
//	0x50021c00, 0x09822f02, 0x0b000729, 0x35370000, 0x82051521, 0x82032049, 0x022c3103, 0x8ba8fe24, 0x63f38b8b, 0x6d6dd763, 0x6e6ea501, 0x3f2c2582,
//	0x1802daff, 0x12007302, 0x21001a00, 0x26242f82, 0x32333610, 0x4c06e14c, 0x4e0805e0, 0x0e222601, 0x37171401, 0x34363217, 0x84160327, 0x31806d45,
//	0x26591324, 0x39806c51, 0x0159142c, 0x304c1000, 0x224c0717, 0xa1102f45, 0x01483112, 0x290c9c41, 0x96ba474e, 0x022c139b, 0x5b20051a, 0xf59e2aae,
//	0xfe2ce852, 0x00000ca6, 0x82500002, 0x030e22f7, 0x20f1822d, 0x206d821b, 0x13296111, 0x05371323, 0x122d6107, 0x01205224, 0x32611606, 0xde022413,
//	0xa7445d5c, 0x2527225b, 0x245b9217, 0x06011669, 0x235b9420, 0x5c5d4499, 0x24205b89, 0x9506a75e, 0x067f42b7, 0x55205f92, 0x94068142, 0x42942062,
//	0x03200585, 0x20061b41, 0x22638202, 0x411f001b, 0x1742181d, 0x23659206, 0x7b577c3e, 0xb2206194, 0x26095b53, 0x015afffb, 0x4c2d03f1, 0xbd6105e3,
//	0x27032309, 0xc1611725, 0x16702409, 0x61200601, 0x03250ac6, 0x5c5d4432, 0x2c008200, 0xff600002, 0x0226025a, 0x001000f5, 0x4ea1821e, 0x2e2705f8,
//	0x22230605, 0x4c110307, 0x360806f0, 0x27222310, 0x544dd315, 0x040d2a11, 0x0813060e, 0x482b1118, 0x37557373, 0x23de6463, 0x0f0e6152, 0x2f68ad23,
//	0x03070d14, 0xfd140101, 0xb29b037a, 0xfe9c9113, 0x82a60dca, 0x0300215e, 0x21055b62, 0x9f840203, 0x00001122, 0xf786a18a, 0x9a20a589, 0xa48bee82,
//	0xe5854b20, 0x08000126, 0x1b020000, 0x1924a382, 0x11330000, 0x20093777, 0x0c1b6736, 0x51515925, 0x67b4b474, 0x8225091f, 0x50232350, 0x0f23675e,
//	0xfff9ff34, 0x034001ff, 0x000f0066, 0x13000015, 0x36321632, 0xed821737, 0xf0822620, 0x54362721, 0x2208052b, 0x0e7c1b47, 0x013f070e, 0x077d1b4c,
//	0x013f100c, 0x040476dd, 0x66030476, 0x0915142c, 0x082a2e70, 0x539afc70, 0x022807fe, 0x0000ebff, 0x12033901, 0x44056945, 0x22080f55, 0x11331113,
//	0x068e1a34, 0x01410a0c, 0x068f1a46, 0x01410c0b, 0x12037475, 0x73092829, 0x7308292b, 0x4702eefc, 0x012a0520, 0x00006100, 0x4902d500, 0xe3830300,
//	0x61113322, 0x4f053a47, 0x1f2605d7, 0x0500bb02, 0x19821200, 0x03130724, 0x9e500333, 0x06137005, 0x9c84d720, 0x70235321, 0x9886061a, 0x70dafe21,
//	0x00290c22, 0xff580004, 0x020b024e, 0x205f82f5, 0x2049820e, 0x20658516, 0x20fe8217, 0x21488435, 0x8e410327, 0x73632c06, 0x13452739, 0xab4eb073,
//	0x8387a587, 0x064a2b9d, 0x0a025d2f, 0x07eff7fd, 0x574f4203, 0xf3ff2c05, 0x5d01f3ff, 0x0c007403, 0x70001400, 0x74550da1, 0x208e8707, 0x06765547,
//	0x270ab170, 0x5c33e902, 0x0039335c, 0x28058b68, 0x24035201, 0x13000700, 0x08af5500, 0x93870320, 0x27230632, 0x3d8b211f, 0x0784238c, 0x144427b0,
//	0x524d6073, 0x2106f547, 0x9d68eafc, 0x82002009, 0xfe5224d1, 0x684c02fb, 0x91820697, 0x200b9968, 0x05557505, 0xa2683e20, 0xf96e2d05, 0x01f78be8,
//	0x69a6fe09, 0x11152a65, 0x2812a968, 0x8e0a477e, 0x2b122536, 0x47008200, 0x4c2305af, 0x71004602, 0xea680557, 0x11212605, 0x01111733, 0x234886c0,
//	0x011a5011, 0x2407e568, 0xfe4c4602, 0x23378406, 0x01000061, 0x22055371, 0x71000009, 0x03200555, 0x61358782, 0xff000575, 0xbb0282a4, 0x6802abfd,
//	0x6c6c5501, 0x00020000, 0x202b8252, 0x0bb36991, 0x29821320, 0x4d73522f, 0xfdf5027f, 0x7060010b, 0x00010070, 0x8323821f, 0x820d204f, 0x3524084d,
//	0x11373507, 0x15370333, 0x1525010f, 0x75424261, 0x029c9c03, 0x29fdff00, 0x6001295e, 0x5f64e6fe, 0x6802dc64, 0x15203382, 0x31203382, 0x0b205782,
//	0x11203382, 0x11383384, 0x11071537, 0x7357576c, 0x38015252, 0x01365f36, 0x34ebfe5e, 0x80fe3361, 0x0221b387, 0x0973585b, 0x220a5f56, 0x56172527,
//	0x33200953, 0x20057158, 0x08b271fd, 0x41052d51, 0x1c25052b, 0x11002d03, 0x48798200, 0x458212db, 0x240bcf48, 0x0601160a, 0x0fc44820, 0x3905675f,
//	0xff400002, 0x027103f3, 0x001b00c8, 0x2100002c, 0x23062335, 0x35262722, 0x6f4d3734, 0x74352005, 0x52710925, 0x04f7390f, 0x429c5e41, 0x5d285236,
//	0x043f603d, 0xfafe7a01, 0x04f1f104, 0x94fd0601, 0x2a0c1672, 0x576c3629, 0x264ed5a9, 0x59283520, 0x6620063a, 0x220e5a71, 0x823e0003, 0x02783083,
//	0x00190056, 0x002b0021, 0x22062500, 0x4d361026, 0xc36c0aed, 0x6a988206, 0x25350607, 0x26272637, 0x020e2223, 0xfb3ae001, 0x39fc6d6d, 0x6fe93c04,
//	0x08d16cfe, 0xfd3de73a, 0x8a30308a, 0xe6660131, 0x45140a01, 0x081b332b, 0x019b4e41, 0x4f4f9c2c, 0x3109da6c, 0x01530e4e, 0xfe525205, 0x5e05affb,
//	0x2e122a19, 0x00820036, 0x6100032f, 0x56020000, 0x0e007c03, 0x1b001700, 0x18e57100, 0x37273723, 0x13e97117, 0xfe140123, 0x19ed711e, 0x57418124,
//	0x63820057, 0x02fbfe25, 0x84c80256, 0x99202063, 0x43132063, 0x6893074f, 0x56433620, 0x18587205, 0x431ffd21, 0x022a075e, 0xfbfe3c00, 0x56029001,
//	0xd3820800, 0x87170021, 0x6a122055, 0x17230a5e, 0x84623633, 0x6adc2050, 0x0f220862, 0xa1432406, 0xf9022107, 0x2207696a, 0x83001d3d, 0x000025bf,
//	0x7f035602, 0x1f20bf84, 0x2727bf99, 0x37331737, 0x93230717, 0x1f3f27be, 0x1f8a078a, 0x2b413d8e, 0x30ec2619, 0x61303c3c, 0x216a8200, 0x63823e00,
//	0x2e039724, 0xbf830f00, 0x880f156b, 0x0d1d6b65, 0x6087a120, 0x250b256b, 0x44442ed7, 0x53826b2e, 0xe7ff0126, 0xe6004eff, 0x6d055769, 0x0c200b99,
//	0x6d06fd44, 0x2e820a93, 0x0001002b, 0x01870261, 0x002403c3, 0x093d4507, 0x98488220, 0x87022106, 0x84058448, 0x02d92457, 0x82320195, 0x05a54dab,
//	0x2720ff84, 0x03218a86, 0x297e8700, 0x16000200, 0xd1008202, 0x4f823503, 0x51820f20, 0x200e6151, 0x09425116, 0x51db0221, 0x00200d25, 0x57208b82,
//	0xcd236382, 0x83001203, 0x0ec15239, 0xbb4cab20, 0x0aab4c0e, 0x63000136, 0xdb00a402, 0x03000203, 0x35130000, 0x78631533, 0x5e5ea402, 0x2a264f82,
//	0x23021601, 0x17837801, 0x2115012c, 0xfe230237, 0x78010107, 0x6b836262, 0x1b823e20, 0x1b85fa20, 0x21351328, 0xbc023e15, 0x19831601, 0x37281b83,
//	0xb700d101, 0x0800e002, 0x34374f82, 0x15061737, 0x37262317, 0x061c3848, 0x17020466, 0x2d264683, 0x851c7745, 0x82c22027, 0x84d22027, 0x07142827,
//	0x27353627, 0x82b71633, 0x67072b27, 0x838b0204, 0x452c2746, 0x27832678, 0x76ff3826, 0x8500b800, 0x17202783, 0x15222585, 0x4e827006, 0x01056536,
//	0x462b268a, 0x85242378, 0x02000000, 0xd1013400, 0xe2026701, 0x11202782, 0x23233682, 0x83363526, 0x8705207c, 0x52012982, 0x49010467, 0xe8fe1b36,
//	0x012a8b85, 0x7a291cd1, 0x452a2349, 0x93828530, 0x93834720, 0xc0234383, 0x83026801, 0x20438293, 0x20958713, 0x27088717, 0x1b364ab4, 0xb4046706,
//	0x8d29a586, 0x28244a7a, 0x2b1c7647, 0x20ad8285, 0x83ad8347, 0xff362687, 0x006a0174, 0x88878584, 0x873720b1, 0x856e2043, 0x47b521ba, 0x043c0783,
//	0x4729258a, 0x86242379, 0x26418785, 0x1c7a4729, 0x3e000100, 0x4a012401, 0x07003302, 0xdd63d582, 0x4a012e06, 0x4d4e714d, 0x67014d72, 0x408c4343,
//	0x82188241, 0x00202b27, 0x020d0153, 0x0006004e, 0x4a673700, 0x7b572908, 0xfdfe537b, 0xc606c634, 0x01222482, 0x23821f00, 0x23850c20, 0xed633f20,
//	0x7b1f2605, 0x9595587b, 0x22208288, 0x82fefd34, 0x00022a23, 0x02f3ff26, 0x00c80243, 0x252d8210, 0x21353700, 0x47532115, 0x23022606, 0x35270322,
//	0x05a65f33, 0x22233b08, 0x15210706, 0xfed60126, 0x66380be5, 0x0a213563, 0xdd3c7325, 0x14414022, 0x0c50d888, 0x33532f7e, 0xf21b010b, 0x3e5e5151,
//	0x06571616, 0xff001f13, 0x6c8c518d, 0x330d6114, 0x6682515d, 0x0001002b, 0x0086ff31, 0x005400c0, 0x44af8208, 0x5726076d, 0x152a6569, 0xf3470d11,
//	0x023e240c, 0x5e8b01fc, 0x00210607, 0x06144913, 0x5d783e23, 0x08d05e78, 0x81000128, 0xf900f302, 0xb3425203, 0x78812507, 0x5f5ff302, 0x72266382,
//	0x8f01e702, 0x17847603, 0x07053727, 0x03011a72, 0x05d45f13, 0x97000128, 0xb301e602, 0x1b847703, 0x17252727, 0x000113aa, 0x053b471c, 0xf8ff0128,
//	0x5001e202, 0x9b837403, 0x21074049, 0x27621606, 0x30e22108, 0x28051e62, 0x02300002, 0x03ec00d7, 0x059f4387, 0x61261221, 0x66200d63, 0x200b5761,
//	0x0d4e61d7, 0x05269b82, 0x5e01ee02, 0x3b827f03, 0x45130021, 0x05200603, 0x20070344, 0x07d6444f, 0x402c2782, 0xb501ea02, 0x10006603, 0x32130000,
//	0x6206e446, 0x36360670, 0x08a11d94, 0x3f040a0e, 0xa21d5101, 0x3f080f0e, 0x2d660301, 0x5d620b1f, 0x011c2209, 0x20418256, 0x20008400, 0x20058299,
//	0x26038201, 0x00010000, 0x86990004, 0x82022017, 0x869d200b, 0x0003240b, 0x86a10014, 0x0004240b, 0x86b50009, 0x0005240b, 0x86be000d, 0x8206200b,
//	0x86cb2017, 0x0007240b, 0x86d4003c, 0x0008240b, 0x86100122, 0x8a09200b, 0x000b240b, 0x8632011a, 0x000c2417, 0x864c0117, 0x000d240b, 0x86630190,
//	0x820e200b, 0x00f32623, 0x04010003, 0x229c8209, 0x860d0232, 0x0001240b, 0x863f0308, 0x8202200b, 0x8647200b, 0x0003240b, 0x864f0328, 0x0004240b,
//	0x86770312, 0x0005240b, 0x8689031a, 0x8206200b, 0x86a32017, 0x0007240b, 0x86b50378, 0x0008240b, 0x862d0444, 0x8a09200b, 0x000b240b, 0x86710434,
//	0x000c2417, 0x86a5042e, 0x010d240b, 0x86d30420, 0x0e2e080b, 0xf3053400, 0x79706f43, 0x68676972, 0x63282074, 0x30322029, 0x202c3131, 0x6972614d,
//	0x20616c65, 0x736e6f4d, 0x65766c61, 0x616d2820, 0x0c866d72, 0x6d67402c, 0x2e6c6961, 0x296d6f63, 0x3d93202c, 0x676e4132, 0x6e696c65, 0x61532061,
//	0x6568636e, 0x6128207a, 0x5f281182, 0x79406764, 0x6f6f6861, 0x2e223983, 0x3c827261, 0x7469573c, 0x65522068, 0x76726573, 0x46206465, 0x20746e6f,
//	0x656d614e, 0x75522220, 0x04846164, 0x6c6f422e, 0x302e3164, 0x553b3330, 0x3b4e574b, 0x2d201783, 0x08831383, 0x08832020, 0x72655627, 0x6e6f6973,
//	0x8d248420, 0x7369291e, 0x74206120, 0x65646172, 0x6b23bc82, 0x91666f20, 0x6e6123d6, 0xad8f2064, 0x2c20fb8f, 0x77232190, 0x832e7777, 0x20e383d1,
//	0x86e28573, 0x231983d3, 0x616b756d, 0x86072a41, 0x68542116, 0xde848b82, 0x666f5328, 0x72617774, 0x10822065, 0x63696c25, 0x82736e65, 0x6e7531f8,
//	0x20726564, 0x20656874, 0x204c4953, 0x6e65704f, 0x20050b41, 0x2120854c, 0xe489202c, 0x202e3122, 0x3b864c84, 0x612d4683, 0x6c696176, 0x656c6261,
//	0x74697720, 0x08f28268, 0x51414621, 0x3a746120, 0x74746820, 0x2f2f3a70, 0x69726373, 0x2e737470, 0x2e6c6973, 0x2f67726f, 0x994c464f, 0x43003919,
//	0x70006f00, 0x72007900, 0x67006900, 0x74006800, 0x28002000, 0x29006300, 0x32240782, 0x31003000, 0x2c200182, 0x4d220b82, 0x23846100, 0x6c006522,
//	0x20220982, 0x37824d00, 0x73006e22, 0x6c240b82, 0x65007600, 0x28222182, 0x23846d00, 0x198e6d20, 0x57824020, 0x69201983, 0x2e203982, 0x6f205982,
//	0x29212782, 0xa7538300, 0x0041227b, 0x8343826e, 0x82692079, 0x82612009, 0x8253206b, 0x826e2069, 0x8268204b, 0x847a2079, 0x8661207b, 0x005f2223,
//	0x202b8264, 0x20d18240, 0x20cd8261, 0x878b826f, 0x842e2073, 0x2079859d, 0x20ed8257, 0x221f8274, 0x82520020, 0x82732041, 0x84722003, 0x826420c5,
//	0x8446204b, 0x827420bf, 0x824e2009, 0x846d2031, 0x822220db, 0x82752027, 0x00612159, 0x42200989, 0x6c202782, 0x31241382, 0x30002e00, 0x332a0182,
//	0x55003b00, 0x57004b00, 0x09824e00, 0x85005221, 0x002d212f, 0x11872787, 0x11882020, 0x77845620, 0x8b827320, 0xbd826f20, 0x89002021, 0x223d9b49,
//	0x82730069, 0x8261209b, 0x00742203, 0x20a18272, 0x41458264, 0x6b200579, 0x6f221382, 0xad416600, 0x82612024, 0x82642071, 0x1f5b4129, 0x201ff741,
//	0x2143a22c, 0x01830077, 0xab822e20, 0x200dc741, 0x0cc54173, 0x870da741, 0x006d2433, 0x826b0075, 0x0f554227, 0x54232d8d, 0x41006800, 0xbd410517,
//	0x00532609, 0x0066006f, 0x247b8274, 0x00720061, 0x85a78265, 0x826c2021, 0x82632029, 0x006e220f, 0x20058273, 0x24178264, 0x006e0075, 0x200b8264,
//	0x200b8272, 0x83498274, 0x0053242b, 0x824c0049, 0x004f220f, 0x212b8470, 0x59890020, 0x418c4c20, 0x25822c20, 0x2213c941, 0x822e0031, 0x8d998919,
//	0x86202077, 0x006122af, 0x22dd8276, 0x826c0069, 0x82622005, 0x207b8305, 0x089d4277, 0x41826120, 0x41004624, 0x07825100, 0xcb826120, 0x07823a20,
//	0x07826820, 0x70007426, 0x2f003a00, 0x73220182, 0xdd826300, 0x0f826920, 0xcf827420, 0x03822e20, 0x20056743, 0x2015826f, 0x201f8267, 0x20b7824f,
//	0x20d3824c, 0xad358274, 0x00002433, 0x84000200, 0xb5ff2300, 0x08843200, 0xf420048f, 0x01201082, 0x38082582, 0x00040003, 0x00060005, 0x00080007,
//	0x000a0009, 0x000c000b, 0x000e000d, 0x0010000f, 0x00120011, 0x00140013, 0x00160015, 0x00180017, 0x001a0019, 0x001c001b, 0x001e001d, 0x3ace821f,
//	0x00220021, 0x00240023, 0x00260025, 0x00280027, 0x002a0029, 0x002c002b, 0x822e002d, 0x003022be, 0x2c7b8231, 0x00340033, 0x00360035, 0x00380037,
//	0x34f88239, 0x003c003b, 0x003e003d, 0x0040003f, 0x00420041, 0x00440043, 0x09e88245, 0x4800476e, 0x4a004900, 0x4c004b00, 0x4e004d00, 0x50004f00,
//	0x52005100, 0x54005300, 0x56005500, 0x58005700, 0x5a005900, 0x5c005b00, 0x5e005d00, 0x60005f00, 0xa3006100, 0x85008400, 0x9600bd00, 0x8600e800,
//	0x8b008e00, 0xa9009d00, 0x0201a400, 0xda008a00, 0x93008300, 0xf300f200, 0x97008d00, 0xc3008800, 0xf100de00, 0xaa009e00, 0xf400f500, 0xa200f600,
//	0xc900ad00, 0xae00c700, 0x63006200, 0x64009000, 0x6500cb00, 0xca00c800, 0xcc00cf00, 0xce00cd00, 0x6600e900, 0xd000d300, 0xaf00d100, 0xf0006700,
//	0xd6009100, 0xd500d400, 0xeb006800, 0x8900ed00, 0x69006a00, 0x6d006b00, 0x6e006c00, 0x6f00a000, 0x70007100, 0x73007200, 0x74007500, 0x77007600,
//	0x7800ea00, 0x79007a00, 0x7d007b00, 0xb8007c00, 0x7f00a100, 0x80007e00, 0xec008100, 0xba00ee00, 0x04010301, 0xd7000501, 0x07010601, 0x09010801,
//	0x0b010a01, 0x0d010c01, 0xe300e200, 0x0f010e01, 0xb100b000, 0x11011001, 0x13011201, 0x15011401, 0xe100d800, 0xd900dd00, 0xb2001601, 0xb600b300,
//	0xc400b700, 0xb500b400, 0x8700c500, 0xbf00be00, 0x18011701, 0x1a011901, 0x1c011b01, 0x1e011d01, 0x20011f01, 0x75072101, 0x3030696e, 0x68044441,
//	0x06726162, 0x6c697449, 0x69066564, 0x02330684, 0x69024a49, 0x634a0b6a, 0x75637269, 0x656c666d, 0x896a0b78, 0x6b0c3e0b, 0x6d6d6f63, 0x63636161,
//	0x0c746e65, 0x6572676b, 0x616c6e65, 0x6369646e, 0x6f644c0a, 0x21178574, 0x0a826c04, 0x614e0628, 0x65747563, 0x06856e06, 0x06845220, 0x8b520c21,
//	0x8a72203e, 0x5206280c, 0x6f726163, 0x8472066e, 0x82082006, 0x656c2540, 0x0c6a7373, 0x632b5488, 0x4504626d, 0x026f7275, 0x8a0b5243, 0x640c2d37,
//	0x65726569, 0x2e736973, 0x10706163, 0x10832d8b, 0x72670925, 0x84657661, 0x837f8409, 0x890e2009, 0x822e20cd, 0x72082433, 0x84676e69, 0x84798421,
//	0x69742309, 0x3584646c, 0x00000029, 0xff010001, 0x840f00ff, 0x23048209, 0x316f89c9, 0x00240682, 0x1a042dcb, 0x09200785, 0x20057d4a, 0x200d820e,
//	0x23038218, 0x00020000, 0x00213382, 0x200582f3, 0x240f8204, 0x00000002, 0x34038201, 0x0030000a, 0x4402003e, 0x00544c46, 0x74616c0e, 0x001a006e,
//	0x20178204, 0x205d8200, 0x8b078201, 0x6b01260b, 0x006e7265, 0x20158208, 0x21038401, 0x45850004, 0x00083608, 0x00d40401, 0x00000004, 0x005e002a,
//	0x0072006c, 0x0086007c, 0x009a0090, 0x00e200c4, 0x011a01e8, 0x013a0130, 0x01960178, 0x02e601b0, 0x021a0214, 0x023a0220, 0x08098268, 0xcc02922c,
//	0x1803d602, 0x70034603, 0x0004da03, 0x1c041604, 0x48043a04, 0x90048604, 0xac049e04, 0xc004b204, 0x0300ce04, 0xfbff3b00, 0x03823c00, 0x10005528,
//	0x85000100, 0x7982f6ff, 0xecff1724, 0x13821c00, 0x17000226, 0x1a00f1ff, 0x14221384, 0x0988f4ff, 0x2784f020, 0x07000a22, 0x0e241982, 0x1400e2ff,
//	0x17202f82, 0x18240b82, 0x1b00eaff, 0x63240b82, 0x6400d8ff, 0x85200382, 0xa0200b82, 0x07221782, 0x0d820d00, 0x41822a20, 0xe4ff3722, 0xed226d82,
//	0x5d824600, 0x03824a20, 0x1d825c20, 0x5b000122, 0x0c220982, 0x2d821000, 0x83821420, 0xf1ff3924, 0x95843a00, 0x4400e622, 0x46241f82, 0x4a00f2ff,
//	0x59201b82, 0x5a203f82, 0x5b200f82, 0x5c200382, 0x05222382, 0x09823700, 0x03823920, 0x03823b20, 0x1d823c20, 0xa9843d20, 0xeeff3924, 0x03823d00,
//	0x0f000f2a, 0x1d00c4ff, 0x2400e7ff, 0x26240382, 0x2d00f8ff, 0x30201f82, 0x34202782, 0x38244d82, 0x3900f3ff, 0x3a200782, 0x3b201382, 0x3c204d82,
//	0x44202382, 0x46203582, 0x4a200782, 0x07200f82, 0xfb208f82, 0xee212182, 0x205d8500, 0x208b82f6, 0x20b784fb, 0x209b824d, 0x20538206, 0x201d82f8,
//	0x20cd82f6, 0x206d82f6, 0x201984f8, 0x2019825d, 0x2037820d, 0x201986e2, 0x201982f4, 0x20c388f1, 0x20558249, 0x2071824a, 0x20718256, 0x20038258,
//	0x20038259, 0x2013825a, 0x2499825c, 0xff0d000b, 0x263982ba, 0x002d00d7, 0x8232001c, 0xff372487, 0x823800dd, 0xff39242d, 0x823a00e2, 0xff3c2221,
//	0x216382d3, 0x358300f4, 0x75820120, 0x8300f821, 0x00f62205, 0x20e58206, 0x22e582e6, 0x823900ec, 0x20ab874b, 0x2253843d, 0x82b5ff0f, 0x82e22019,
//	0x00ea22ab, 0x22538230, 0x86f7ff38, 0x82dd2099, 0x82ec2099, 0x82ec2099, 0x00e22253, 0x2089824d, 0x206d820a, 0x061141f6, 0xf382fd20, 0x6382fa20,
//	0x2582ec20, 0x2586f620, 0x4a00ec22, 0x56245f82, 0x0e00fbff, 0xce207182, 0xf820ab82, 0x3a205b88, 0x3c203f82, 0x44227182, 0x4f82e4ff, 0x2982dd20,
//	0x5500e22e, 0x5600e6ff, 0x5800eaff, 0x5c00dcff, 0x5d201f82, 0x02203d82, 0xf420c982, 0x1020bb84, 0xe7204382, 0xf4263f82, 0xe8ff2600, 0x9b822800,
//	0x03822d20, 0xe7842e20, 0x7586fb20, 0x4b82f420, 0x4b82f120, 0x4b82f620, 0x4b82f420, 0x4b82f120, 0xff84f120, 0x2b825c20, 0x41820b20, 0x4182e220,
//	0x4182e720, 0x3700ee22, 0x38226182, 0xbf82f4ff, 0x4183b783, 0xb782fb20, 0x4182f920, 0x3982f420, 0x0a00f422, 0xfb20af82, 0x3c206b88, 0x3d222d82,
//	0x2182faff, 0x2182f620, 0x6382ec20, 0x2582ec20, 0x5b82ec20, 0x1a00f722, 0xc4205782, 0x1d242d84, 0x2400deff, 0x2622b582, 0xa182ecff, 0x2b00ec22,
//	0xf621a584, 0x20a58300, 0x24a98230, 0x00f6ff31, 0x201b8235, 0x200b8236, 0x20038237, 0x22038238, 0x82fbff39, 0x00fb22e3, 0x2061843b, 0x206182f4,
//	0x206182f4, 0x206182e7, 0x416182e7, 0x5a2005bd, 0x5d202382, 0x09200382, 0x24206584, 0x61833582, 0x69823820, 0x41ff3a21, 0xf8200779, 0xec24fb86,
//	0x04000500, 0x0d22bd82, 0xef842800, 0xfaff102a, 0x14002200, 0x4d000100, 0x07201982, 0xfa205f82, 0xfa202986, 0xf9225f82, 0x4d825b00, 0x23825c20,
//	0x1d825d20, 0xcf820320, 0x5c00f622, 0x5d201182, 0x0f218d82, 0x20438500, 0x247582dd, 0xff1d00ce, 0x22fd8ae7, 0x824d00f0, 0x8253200f, 0xff562125,
//	0xf421a383, 0x09674300, 0x8300f621, 0x8202203d, 0x84fa20c1, 0x8203204b, 0x82d82087, 0x82f8203f, 0x00f02111, 0xe7200d87, 0xfa202582, 0x4a209582,
//	0x13834382, 0xea20f183, 0x03203984, 0xf6202782, 0x3d854f82, 0x13000122, 0x01242182, 0x10002a00, 0x22085348, 0x481a0018, 0x39480e3d, 0x1137480d,
//	0x4a00492a, 0x53004e00, 0x57005500, 0x200a0d48, 0x08774585, 0x2e002c22, 0x200c7745, 0x08774518, 0x098a0020, 0x0000002a, 0x01000000, 0x00000000,
//	0x57dafa05, 0x0000da70,
//};
//
